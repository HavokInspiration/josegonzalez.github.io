<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>Developer, Accidental Ops Guy, and CakePHP Core Developer</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 10 Dec 2014 00:01:24 +0000</pubDate>
    <lastBuildDate>Wed, 10 Dec 2014 00:01:24 +0000</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Contributing to CakePHP</title>
        <description>&lt;p&gt;This is an extremely short post where I’ll ask that you all give back (not just monetarily) but with your time. Here are some projects that will need feedback before 3.0 goes general availability:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cakephp/cakephp/pull/5296&quot;&gt;Retooling Validation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cakephp/cakephp/issues/5319&quot;&gt;Bake Improvements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cakephp/cakephp/issues/5251&quot;&gt;Table-less FormModel classes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cakephp/cakephp/issues/5251&quot;&gt;&lt;em&gt;Maybe&lt;/em&gt; supporting users without ext-intl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;migrations-project-needs-some-workhttpsgithubcomcakephpmigrationspull34&quot;&gt;&lt;a href=&quot;https://github.com/cakephp/migrations/pull/34&quot;&gt;Migrations project needs some work&lt;/a&gt;&lt;/h2&gt;
    &lt;p&gt;Some repos that need some love:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cakephp/datasources&quot;&gt;Datasources needs an update&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/croogo/croogo&quot;&gt;Croogo CMS doesn’t yet boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cakephp/upgrade&quot;&gt;Break the Upgrade plugin!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cakephp/docs/tree/3.0&quot;&gt;Doc work for 3.x&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cakephp/cakepackages&quot;&gt;Filtering 3.x packages on the plugins site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CakePHP is a community project. If any of the above aren’t things you’re interested - but you’d love to give back - feel free to give feedback on existing features, write blog posts, and release updates of existing open source projects.&lt;/p&gt;

&lt;p&gt;Until tomorrow!&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Dec 2014 17:31:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/09/contributing-to-cakephp/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/09/contributing-to-cakephp/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Closing Issues in our Anonymous Issue Tracker using Events</title>
        <description>&lt;p&gt;One thing that you’ll want to eventually handle is closing issues. We’ll do this using a simple Event. We need to first add the following migration to handle whether an issue is closed or not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Phinx\Migration\AbstractMigration;

class ClosingIssues extends AbstractMigration {
  public function change() {

    $table = $this-&amp;gt;table('issues');
    $table
      -&amp;gt;addColumn('is_closed', 'boolean', [
        'default' =&amp;gt; false,
      ])
      -&amp;gt;save();
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll want to run the migration and clear your orm cache:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
bin/cake orm_cache clear
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, you should add this field to the &lt;code&gt;IssueEntity::$_accessible&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Whenever an issue has it’s &lt;code&gt;is_closed&lt;/code&gt; field set to true in the database (1 in mysql), then we should disable commenting on said entity. We can do this by hooking into the &lt;code&gt;Model.beforeValidate&lt;/code&gt; event in our &lt;code&gt;app/config/events.php&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use App\Model\Entity\Comment;

EventManager::instance()-&amp;gt;attach(function (Event $event, Entity $entity, ArrayObject $options) {
    if (!($entity instanceof Comment)) {
        return true;
    }

    $table = TableRegistry::get('Issues');
    $open_issue = $table-&amp;gt;find('all')-&amp;gt;where([
        'Issues.id' =&amp;gt; $entity-&amp;gt;issue_id,
        'Issues.is_closed' =&amp;gt; false,
    ])-&amp;gt;first();

    return !empty($open_issue);
}, 'Model.beforeValidate');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A bit of explanation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’re only going to trigger this event for &lt;code&gt;Comment&lt;/code&gt; entities, hence the &lt;code&gt;instanceof&lt;/code&gt; check&lt;/li&gt;
  &lt;li&gt;Since we only want to allow commenting on open issues, we need to find the entity matching our comment’s issue only if &lt;code&gt;is_closed&lt;/code&gt; is false.&lt;/li&gt;
  &lt;li&gt;If an event returns false, then &lt;code&gt;Event-&amp;gt;stopPropagation&lt;/code&gt; is automatically called. For the &lt;code&gt;Model.beforeValidate&lt;/code&gt; event, if the event is stopped, then the validation fails, so therefore if the &lt;code&gt;open_issue&lt;/code&gt; is empty, then we fail validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quite simple! We can refactor this into a validation rule, but we will avoid doing so for now as validation is currently being refactored in 3.x.&lt;/p&gt;

&lt;h2 id=&quot;homework-time&quot;&gt;Homework time!&lt;/h2&gt;

&lt;p&gt;A few more things you’ll want to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Provide some interface to actually close an issue. You can perhaps place this functionality behind basic auth, build a cake shell to handle closing issues, or simply allow anyone to close issues. It’s up to you.&lt;/li&gt;
  &lt;li&gt;You need to hide the form if the issue is closed. You can do this by modifying your bake templates to handle this case and rebaking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the above change, our anonymous issue tracker is “feature-complete”. We’ve covered quite a bit of CakePHP in building this application, but are definitely many more features to cover. Stay tuned for the next tutorial series, where we’ll cover creating an ecommerce store from scratch, including use authentication, payment processing and more!&lt;/p&gt;

&lt;p&gt;Be sure to follow along as via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;http://josediazgonzalez.com/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2014 CakeAdvent Calendar.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Dec 2014 17:31:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/08/closing-issues-in-our-anonymous-issue-tracker/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/08/closing-issues-in-our-anonymous-issue-tracker/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Parsing markdown comments</title>
        <description>&lt;p&gt;In CakePHP 3, some things change significantly, and others stay pretty much the same. CakePHP 3 provides a new &lt;code&gt;AppView&lt;/code&gt; class in &lt;code&gt;app/src/View/AppView.php&lt;/code&gt;. You can do any of the following here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Load helpers for every template&lt;/li&gt;
  &lt;li&gt;Override &lt;code&gt;View&lt;/code&gt; methods&lt;/li&gt;
  &lt;li&gt;Add custom methods that may not necessarily require a new helper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our case, we’ll be making a new &lt;code&gt;MarkdownHelper&lt;/code&gt; available everywhere. As such, our &lt;code&gt;AppView&lt;/code&gt; will look similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\View;

use Cake\View\View;

class AppView extends View {
    public function initialize() {
        $this-&amp;gt;loadHelper('Markdown');
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;creating-a-new-helper&quot;&gt;Creating a new helper&lt;/h3&gt;

&lt;p&gt;In our helper, we’re going to depend upon the &lt;code&gt;colinodell/commonmark-php&lt;/code&gt; package to render markdown that follows the &lt;a href=&quot;http://commonmark.org/&quot;&gt;CommonMark&lt;/a&gt; specification. First, you’ll want to install that package using &lt;code&gt;composer&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ssh onto the vm
vagrant ssh

cd /vagrant/app
composer require colinodell/commonmark-php:0.3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;colinodell/commonmark-php&lt;/code&gt; package will be named &lt;code&gt;league/markdown&lt;/code&gt; shortly, but for now, these instructions should work fine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can create a very simple helper class. Helper classes allow us to format output for templates in a more user friendly format. We could, for instance, use a helper to generate the correct gravatar url for a given email address. Helpers allow you to consolidate your template logic into classes that can be easily tested and reused not just in a single application, but across multiple applications that need the same functionality.&lt;/p&gt;

&lt;p&gt;You should first create the file containing your new helper:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd /vagrant/app
touch app/src/View/Helper/MarkdownHelper.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The contents of our helper will then be the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\View\Helper;

use Cake\View\Helper;
use Cake\View\View;
use ColinODell\CommonMark\CommonMarkConverter;

class MarkdownHelper extends Helper {
    public function __construct(View $view, $config = []) {
        parent::__construct($view, $config);
        $this-&amp;gt;Converter = new CommonMarkConverter;
    }

    public function out($input) {
      return $this-&amp;gt;Converter-&amp;gt;convertToHtml($input);
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use our helper, anytime we output &lt;code&gt;Comment&lt;/code&gt; or &lt;code&gt;Issue&lt;/code&gt; contents, we would wrap them in a call to our helper:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// For issues
$this-&amp;gt;Markdown-&amp;gt;out($issue-&amp;gt;text);

// For comments
$this-&amp;gt;Markdown-&amp;gt;out($comment-&amp;gt;comment);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Helpers can be a pretty simple way of consolidating logic in your template files. While in this case there wasn’t much work to be done, you might want to consider using helpers for outputting stuff like navigation bars, custom form elements, and automatically parsing urls into embeddable images and videos.&lt;/p&gt;

&lt;h3 id=&quot;homework-time&quot;&gt;Homework Time!&lt;/h3&gt;

&lt;p&gt;Since it’s still sunday, we’re going to skip homework. I’m going to personally listen to the guy playing jazz two apartment buildings down and go to Fifthsgiving in an hour. Let me know in the comments if you have any feedback, and see you all tomorrow!&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Dec 2014 13:45:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/07/parsing-markdown-comments/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/07/parsing-markdown-comments/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        <category>composer</category>
        
        <category>helpers</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Emailing users when a new comment is posted</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;The previous post had &lt;code&gt;IssuesTable.afterSave&lt;/code&gt; as the event in use. We’ve changed this to &lt;code&gt;CommentsTable.afterSave&lt;/code&gt; to better reflect what is occurring.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similar to yesterday, we’ll want to &lt;em&gt;also&lt;/em&gt; notify users via email. If a user has specified their email address, we’ll want to notify them at their email address. Lets start by adding a new event to our &lt;code&gt;app/config/events.php&lt;/code&gt; file. It will follow the same basic pattern as the previous event. Here the previous event is for your recollection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\Event\Event;
use Cake\Event\EventManager;
use Cake\Network\Http\Client;
use Cake\ORM\Entity;
use Cake\ORM\TableRegistry;

EventManager::instance()-&amp;gt;attach(function (Event $event, Entity $entity, ArrayObject $options) {
    $table = TableRegistry::get('Comments');
    $comments = $table-&amp;gt;find('all')-&amp;gt;where([
        'Comments.id !=' =&amp;gt; $entity-&amp;gt;id,
        'Comments.issue_id' =&amp;gt; $entity-&amp;gt;issue_id,
        'Comments.webhook_url IS NOT' =&amp;gt; null,
    ]);
    foreach ($comments as $comment) {
        $data = $comment-&amp;gt;toArray();
        unset($data['email_address']);
        unset($data['webhook_url']);

        $http = new Client();
        $http-&amp;gt;post($comment-&amp;gt;webhook_url, json_encode($data), [
          'type' =&amp;gt; 'json'
        ]);
    }
}, 'IssuesTable.afterSave');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only part we’re going to change is &lt;em&gt;how&lt;/em&gt; we send the data - rather than via a POST, it will send an email. A couple notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The find is being duplicated each time&lt;/li&gt;
  &lt;li&gt;We’re going to unset the &lt;code&gt;email_address&lt;/code&gt; and &lt;code&gt;webhook_url&lt;/code&gt; fields from the data array both times&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Boo. Code duplication that will probably happen again if we implement more callback-types. To reduce this, we’re going to add a custom finder to simplify our find call, and then a custom method to our Comment Entity class to output the public data.&lt;/p&gt;

&lt;h3 id=&quot;custom-finders&quot;&gt;Custom finders&lt;/h3&gt;

&lt;p&gt;In CakePHP 3, custom finders are simply methods that return custom query objects. As a result, hey are a bit simpler to manipulate than in CakePHP 2. Since our find call above was simply a query object manipulator, it will be quite simple to transform that into a custom find in our &lt;code&gt;app/src/Model/Table/CommentsTable.php&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// You can move the `\App\Model\Entity\Comment` to a `use` call at the top
// of the class and then reference it with `Comment` in the `instanceof` check
public function findNotifiable(Query $query, array $options) {
    if (empty($options['comment']) || !($options['comment'] instanceof \App\Model\Entity\Comment)) {
        throw new \InvalidArgumentException('Missing comment entity argument');
    }
    if (empty($options['notifierField']) {
        throw new \InvalidArgumentException('Missing notifierField argument');
    }

    return $query-&amp;gt;where([
        'Comments.id !=' =&amp;gt; $options['comment']-&amp;gt;id,
        'Comments.issue_id' =&amp;gt; $options['comment']-&amp;gt;issue_id,
        &quot;Comments.{$options['notifierField']} IS NOT&quot; =&amp;gt; null,
    ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you place the above in your &lt;code&gt;CommentsTable&lt;/code&gt; class, you can now call the custom find in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$table = TableRegistry::get('Comments');
$comments = $table-&amp;gt;find('notifiable', [
    'comment' =&amp;gt; $comment
    'notifierField' =&amp;gt; 'webhook_url'
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this allows you easily replace the &lt;code&gt;Model::beforeFind()&lt;/code&gt; in 2.x, you will need to use &lt;a href=&quot;http://book.cakephp.org/3.0/en/orm/query-builder.html#map-reduce&quot;&gt;map/reduce&lt;/a&gt; functions to simulate &lt;code&gt;Model::afterFind()&lt;/code&gt;. Note that you can place these within the custom finder as well, just that their syntax is a little different. We’ll explore them in a future post.&lt;/p&gt;

&lt;h3 id=&quot;custom-entity-methods&quot;&gt;Custom entity methods&lt;/h3&gt;

&lt;p&gt;Entities are simply objects returned by the ORM. Pretty straightforward. They replace the former array structure returned by a &lt;code&gt;Model::find()&lt;/code&gt;, allowing developers to add custom methods to the base objects, making dealing with data representation a bit easier. In our case, we’re going to wrap the &lt;code&gt;Comment::toArray()&lt;/code&gt; method with our own logic for setting property data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function toPublicArray() {
  $data = $this-&amp;gt;toArray();
  unset($data['email_address']);
  unset($data['webhook_url']);
  return $data;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding the above to our &lt;code&gt;app/src/Model/Entity/Comment.php&lt;/code&gt; file will allow us to use the method in our code like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$comment = $table-&amp;gt;find('all')-&amp;gt;first();
$publicData = $comment-&amp;gt;toPublicArray();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An &lt;em&gt;alternative&lt;/em&gt; is to modify the &lt;code&gt;$_hidden&lt;/code&gt; property of the Entity. This property will hide a field from the output of &lt;code&gt;$entity-&amp;gt;toArray()&lt;/code&gt; and &lt;code&gt;json_encode($entity)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\Model\Entity;

use Cake\ORM\Entity;
class Comment extends Entity {
  protected $_hidden = ['email_address', 'webhook_url'];

  // other code here
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the above, we can continue using the &lt;code&gt;$entity-&amp;gt;toArray()&lt;/code&gt; method of data retrieval without worrying about whether the data being output contains sensitive information.&lt;/p&gt;

&lt;p&gt;Going forward, we’ll assume you used the &lt;code&gt;$_hidden&lt;/code&gt; method.&lt;/p&gt;

&lt;h3 id=&quot;a-reimagined-event&quot;&gt;A reimagined event:&lt;/h3&gt;

&lt;p&gt;Now that we have the basics in place, our original webhook event looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\Event\Event;
use Cake\Event\EventManager;
use Cake\Network\Http\Client;
use Cake\ORM\Entity;
use Cake\ORM\TableRegistry;

EventManager::instance()-&amp;gt;attach(function (Event $event, Entity $entity, ArrayObject $options) {
    $comments = TableRegistry::get('Comments')-&amp;gt;find('notifiable', [
        'comment' =&amp;gt; $entity,
        'notifierField' =&amp;gt; 'webhook_url'
    ]);
    foreach ($comments as $comment) {
        $http = new Client();
        $http-&amp;gt;post($comment-&amp;gt;webhook_url, json_encode($comment), [
          'type' =&amp;gt; 'json'
        ]);
    }
}, 'IssuesTable.afterSave');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Much&lt;/em&gt; nicer.&lt;/p&gt;

&lt;h3 id=&quot;sending-email&quot;&gt;Sending email&lt;/h3&gt;

&lt;p&gt;To send email, you’ll need to &lt;a href=&quot;http://book.cakephp.org/3.0/en/core-libraries/email.html#configuring-transports&quot;&gt;configure an email transport&lt;/a&gt;. I’m going assume you did that (gmail via smtp should work fine) so we’ll skip ahead to the actual email sending. Our new event will &lt;em&gt;also&lt;/em&gt; be in the &lt;code&gt;app/config/event.php&lt;/code&gt; file, so we only need to call &lt;code&gt;use&lt;/code&gt; on one more class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\Network\Email\Email;

EventManager::instance()-&amp;gt;attach(function (Event $event, Entity $entity, ArrayObject $options) {
    $comments = TableRegistry::get('Comments')-&amp;gt;find('notifiable', [
        'comment' =&amp;gt; $entity,
        'notifierField' =&amp;gt; 'email_address'
    ]);
    foreach ($comments as $comment) {
        $email = new Email();
        $email-&amp;gt;from(['me@example.com' =&amp;gt; 'Anonymous Issues'])
            -&amp;gt;to($comment-&amp;gt;email_address)
            -&amp;gt;subject(sprintf(&quot;New comment on issue #%d&quot;, $comment-&amp;gt;issue_id))
            -&amp;gt;send($comment-&amp;gt;comment);
    }
}, 'IssuesTable.afterSave');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is a contrived example of email sending. You could subclass the email class into a &lt;code&gt;NotificationEmail&lt;/code&gt; class and have it take a &lt;code&gt;Comment&lt;/code&gt; entity directly - as well as add custom logic around the message body or other configuration - but we’ll leave that as an exercise for larger applications.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While this and the previous tutorial show how to make http requests and notifications in a web request, it may be prudent to move these into background tasks to keep the application responsive. We’ll look into doing just that in a separate post, but keep in mind that performing longer tasks in a web request is ill-advised.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;homework-time&quot;&gt;Homework Time!&lt;/h3&gt;

&lt;p&gt;Lazy sunday tomorrow, so go do something for yourself. &lt;a href=&quot;http://littleanimalgifs.tumblr.com/random&quot;&gt;Here is a link&lt;/a&gt; to random animal gifs. Until next time!&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Dec 2014 13:45:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/06/email-users-when-a-new-comment-is-posted/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/06/email-users-when-a-new-comment-is-posted/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        <category>custom find</category>
        
        <category>email</category>
        
        <category>entities</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Creating Table Callback Events</title>
        <description>&lt;p&gt;For yesterday’s homework, you should have generated the following migration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Phinx\Migration\AbstractMigration;

class WebookUrl extends AbstractMigration {
  public function change() {

    $table = $this-&amp;gt;table('comments');
    $table
      -&amp;gt;addColumn('webhook_url', 'string', [
        'limit' =&amp;gt; '255',
        'null' =&amp;gt; '1',
        'default' =&amp;gt; '',
      ])
      -&amp;gt;save();
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple other notes (while CakePHP 3 is still in beta):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using the field &lt;code&gt;unsigned&lt;/code&gt; is currently invalid. You can either remove those designations from your initial migration, or make them the inverse and use &lt;code&gt;signed&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In order to properly disable the automatic &lt;code&gt;id&lt;/code&gt; field that phinx does, you’ll need to remove the following from the initial schema &lt;code&gt;$table&lt;/code&gt; instantiations:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;-&amp;gt;addColumn('id', 'integer', [
  'limit' =&amp;gt; '11',
  'null' =&amp;gt; '',
  'default' =&amp;gt; '',
])
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To actually start using migrations from now on, you should drop your existing tables (which is okay since we’re starting fresh): and run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
bin/cake orm_cache clear
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will also need to make the &lt;code&gt;webhook_url&lt;/code&gt; to the &lt;code&gt;$_accessible&lt;/code&gt; property in your &lt;code&gt;src/Model/Entity/Issue.php&lt;/code&gt; file. You can do this manually (if you have customizations) or with the bake shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake bake model comments --force --no-table
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In future tutorials, we’ll avoid these issues, but just keep this in mind for now.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Webhooks are actually pretty easy to setup. Whenever a comment is created, we’ll want to notify all other comment webhooks that the issue was updated. To do so, we can hook into the &lt;code&gt;CommentsTable::afterSave()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Table::afterSave()&lt;/code&gt; call takes the following arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Event $event&lt;/code&gt;: The actual event that is occurring&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Entity $entity&lt;/code&gt;: The entity that was just saved&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ArrayObject $options&lt;/code&gt;: An array of options that was passed into the &lt;code&gt;Table::save()&lt;/code&gt; call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t create a concrete &lt;code&gt;afterSave()&lt;/code&gt; method, the event isn’t fired on the Table class, so unfortunately we can’t bind to the global event easily. Instead, we’ll fire a custom &lt;code&gt;CommentsTable.afterSave&lt;/code&gt; event from our own custom &lt;code&gt;afterSave()&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function afterSave(Event $event, Entity $entity, ArrayObject $options) {
  $this-&amp;gt;dispatchEvent('CommentsTable.afterSave', compact('entity', 'options'));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also will want to include the following classes at the top of your table class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use ArrayObject;
use Cake\Event\Event;
use Cake\Orm\Entity;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the future, it may be possible to use custom bake events to insert elements into Table and Entity classes. Stay tuned for bake updates!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we’ve fired our custom event, we can add a new event for it! What I like doing is centralizing my global events in an &lt;code&gt;app/config/events.php&lt;/code&gt; file, so lets add the following line to the &lt;code&gt;app/config/bootstrap.php&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;require __DIR__ . '/events.php';
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we’ll add the following event to our &lt;code&gt;app/config/events.php&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Event\Event;
use Cake\Event\EventManager;
use Cake\Network\Http\Client;
use Cake\ORM\Entity;
use Cake\ORM\TableRegistry;

EventManager::instance()-&amp;gt;attach(function (Event $event, Entity $entity, ArrayObject $options) {
    $table = TableRegistry::get('Comments');
    $comments = $table-&amp;gt;find('all')-&amp;gt;where([
        'Comments.id !=' =&amp;gt; $entity-&amp;gt;id,
        'Comments.issue_id' =&amp;gt; $entity-&amp;gt;issue_id,
        'Comments.webhook_url IS NOT' =&amp;gt; null,
    ]);
    foreach ($comments as $comment) {
        $data = $comment-&amp;gt;toArray();
        unset($data['email_address']);
        unset($data['webhook_url']);

        $http = new Client();
        $http-&amp;gt;post($comment-&amp;gt;webhook_url, json_encode($data), [
          'type' =&amp;gt; 'json'
        ]);
    }
}, 'CommentsTable.afterSave');
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A lot of new code. Lets disect this a bit:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you want an arbitrary Table class, you can use &lt;code&gt;TableRegistry::get()&lt;/code&gt; to retrieve it.&lt;/li&gt;
  &lt;li&gt;The new ORM uses method chaining in order to change the query being used. Note that it is a lazy query, so you need to iterate over the result &lt;em&gt;or&lt;/em&gt; call the methods &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;all()&lt;/code&gt;, &lt;code&gt;first()&lt;/code&gt;, or &lt;code&gt;firstOrFail()&lt;/code&gt; in order to execute the query. Consult the &lt;a href=&quot;http://book.cakephp.org/3.0/en/orm/query-builder.html&quot;&gt;query builder docs&lt;/a&gt; for more details.&lt;/li&gt;
  &lt;li&gt;Every entity has a &lt;code&gt;toArray()&lt;/code&gt; method, which uses the &lt;code&gt;Entity::visibleProperties()&lt;/code&gt; method to decide what to expose. You can limit this by adding fields to the &lt;code&gt;$_hidden&lt;/code&gt; Entity property. Out of laziness, we didn’t use any entity features to remove the &lt;code&gt;email_address&lt;/code&gt; field from the array output. See &lt;a href=&quot;http://book.cakephp.org/3.0/en/orm/entities.html#converting-to-arrays-json&quot;&gt;array/json conversion docs&lt;/a&gt; if you’d like to do so.&lt;/li&gt;
  &lt;li&gt;Every entity is json serializable by default. The EntityTrait class - included in the Entity class - has a &lt;code&gt;jsonSerialize&lt;/code&gt; method which calls &lt;code&gt;toArray()&lt;/code&gt;. Pretty nifty.&lt;/li&gt;
  &lt;li&gt;CakePHP includes a &lt;a href=&quot;http://book.cakephp.org/3.0/en/core-libraries/httpclient.html&quot;&gt;simple HttpClient&lt;/a&gt; that you can use to interact with external webservices. It’s &lt;em&gt;quite&lt;/em&gt; useful. In our case, we’re specifying that we should post json to the api.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you’ll want to regenerate your &lt;code&gt;src/Template/Issues/view.ctp&lt;/code&gt; file in order to add the &lt;code&gt;webhook_url&lt;/code&gt; field to test. You can do so via the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bin/cake bake view issues --force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all you need to do is test your integration. You can do so by creating a new issue and adding comments to that issue. If you want to generate a test url, I recommend using the excellent &lt;a href=&quot;http://requestb.in/&quot;&gt;http://requestb.in/&lt;/a&gt; to make a url that captures your response.&lt;/p&gt;

&lt;h2 id=&quot;homework-time&quot;&gt;Homework Time!&lt;/h2&gt;

&lt;p&gt;There is no homework, it’s the weekend :) . Go forth and use your new knowledge to extend your app however you please.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Dec 2014 17:34:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/05/creating-table-callback-events/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/05/creating-table-callback-events/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        <category>models</category>
        
        <category>events</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Schema Migrations with CakePHP 3</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;I corrected a few issues with the previous post regarding the redirect and &lt;code&gt;requirePost&lt;/code&gt; event. They’ve been corrected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our previous post, I gave you all some homework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make the form actions optional - and turn them off for embedded forms.&lt;/li&gt;
  &lt;li&gt;Create a nicer comment list than the current version.&lt;/li&gt;
  &lt;li&gt;Hide the &lt;code&gt;issue_id&lt;/code&gt; field on the form without removing it completely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the first task, you can extract the form actions into a separate element and make the inclusion of that element conditional - default true - on a variable you specify from the event.&lt;/p&gt;

&lt;p&gt;For the second task, using a custom element for related entities is the way to go.&lt;/p&gt;

&lt;p&gt;For the third task, you will want to populate a new variable - lets call it &lt;code&gt;$inputOptions&lt;/code&gt; - and have it be an array of &lt;code&gt;field&lt;/code&gt; =&amp;gt; &lt;code&gt;options&lt;/code&gt; for the field. Each field being output should be in this array with a default empty array as it’s options. You can use the &lt;code&gt;BakeHelper::stringifyList&lt;/code&gt; to turn those options into a nicely formatted string array.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One thing that is a pain is managing database schema changes. While we had &lt;a href=&quot;https://github.com/cakedc/migrations&quot;&gt;CakeDC/migrations&lt;/a&gt; in the 2.x world, CakePHP 3 is about embracing existing solutions to problems. In CakePHP 3, we’ve delegated the task to the excellent &lt;a href=&quot;https://phinx.org/&quot;&gt;Phinx&lt;/a&gt; library. Phinx is a database migration tool that CakePHP provides a wrapper for with the &lt;a href=&quot;https://github.com/cakephp/migrations&quot;&gt;CakePHP/migrations&lt;/a&gt; plugin. You can use Phinx outside of CakePHP as well, so switching back and forth between CakePHP and other PHP frameworks should be a breeze.&lt;/p&gt;

&lt;p&gt;To install the migrations plugin, we’ll use composer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ssh onto the vm
vagrant ssh

cd /vagrant/app
composer require cakephp/migrations:dev-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point both phinx and the plugin will be installed. Plugins in CakePHP must be enabled before they can be used, and the CakePHP/migrations plugin is no different. Since it’s only useful on the command-line, we’ll enable it with the following code on our &lt;code&gt;app/config/bootstrap_cli.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Plugin;

Plugin::load('Migrations');
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that it’s enabled, we can generate our initial migration from the existing database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd /vagrant/app
bin/cake bake migration Initial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output should be similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Welcome to CakePHP v3.0.0-beta3 Console
---------------------------------------------------------------
App : src
Path: /vagrant/app/src/
---------------------------------------------------------------

Baking migration class for Connection default

Creating file /vagrant/app/config/Migrations/20141204225440_initial.php
Wrote `/vagrant/app/config/Migrations/20141204225440_initial.php`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we look at that file, we’ll see a phinx-style migration that contains all the information about our current database schema. This can be useful for bootstrapping a new database (though our database works just fine for now). It’s pretty similar to the old migrations plugin - you get an &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, and &lt;code&gt;change&lt;/code&gt; method - but uses an object-oriented approach to changing the database.&lt;/p&gt;

&lt;p&gt;You can rollback any migration with the &lt;code&gt;down()&lt;/code&gt; callback by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations rollback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you have created new migrations, you can migrate up to them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One note, there is currently an issue where the Phinx library auto-includes an auto-increment &lt;code&gt;id&lt;/code&gt; field for every database. This might not be desired for certain tables, in which case you’ll want to manually disable the field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$table = $this-&amp;gt;table('statuses', [
    'id' =&amp;gt; false,
    'primary_key' =&amp;gt; ['id']
]);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more docs, see the &lt;a href=&quot;http://docs.phinx.org/en/latest/migrations.html#creating-a-new-migration&quot;&gt;phinx documentation here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;homework-time&quot;&gt;Homework Time!&lt;/h2&gt;

&lt;p&gt;This was a relatively short introduction to database migrations, but I felt it important enough to cover as we’ll be using them extensively over the next few tutorials. Your homework is actually pretty simple. We need to keep track of a &lt;code&gt;webhook_url&lt;/code&gt; string field with a length of 256 characters in our &lt;code&gt;comments&lt;/code&gt; table. Create a new migration and add the field to the table. The command to create an empty migration is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations create WebhookUrl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, there is a bug in Phinx’s - not Cake’s! - templates where the end-docblock for the &lt;code&gt;change()&lt;/code&gt; method is in the wrong place. We’ll get that fixed up before CakePHP 3 goes stable :)&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Dec 2014 14:22:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/04/schema-migrations-with-cakephp-3/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/04/schema-migrations-with-cakephp-3/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        <category>composer</category>
        
        <category>migrations</category>
        
        <category>phinx</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Customizing Bake in CakePHP 3</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Note: There was an error in the sql schema for the comments table from yesterday’s post. If you have the old version, please change it with the following statement in mysql:&lt;/p&gt;

  &lt;p&gt;&lt;code&gt;ALTER TABLE database_name.comments CHANGE comment_id issue_id INT&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;You will also need to regenerate your model classes and clear out the cache:&lt;/p&gt;

  &lt;p&gt;bin/cake bake model comments –force&lt;br /&gt;
  bin/cake bake model issues –force&lt;br /&gt;
  bin/cake orm_cache clear&lt;/p&gt;

  &lt;p&gt;I’ve already corrected yesterdays post, so this change may not be necessary for some users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CakePHP has always had the Bake shell command - you saw it in action &lt;a href=&quot;http://josediazgonzalez.com/2014/12/02/designing-a-store-application-in-cakephp/&quot;&gt;yesterday&lt;/a&gt; - but it’s always been a bit difficult to work with. You would need to escape your actual php code, making it difficult to actually think about the contents of the template. Thanks to some excellent work by &lt;a href=&quot;http://ad7six.com/&quot;&gt;Andy Dawson&lt;/a&gt;, we now have quite a bit of flexibility in writing bake templates.&lt;/p&gt;

&lt;p&gt;In CakePHP, we can use Helpers and elements in our bake templates. As well, CakePHP uses ASP-style tags - &lt;code&gt;&amp;lt;%&lt;/code&gt;, &lt;code&gt;&amp;lt;%=&lt;/code&gt;, and &lt;code&gt;%&amp;gt;&lt;/code&gt; - to execute php code. This sounds weird, but here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace &amp;lt;%= $namespace %&amp;gt;\View\Helper;

use Cake\View\Helper;
use Cake\View\View;

/**
 * &amp;lt;%= $name %&amp;gt; helper
 */
class &amp;lt;%= $name %&amp;gt;Helper extends Helper {

/**
 * Default configuration.
 *
 * @var array
 */
  protected $_defaultConfig = [];

}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any code in enclosed in &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; is executed by CakePHP - &lt;code&gt;&amp;lt;%=&lt;/code&gt; can be used to auto-echo variables - while everything else is just normal php. The above template - when baking a &lt;code&gt;PostHelper&lt;/code&gt;, for instance - turns into the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\View\Helper;

use Cake\View\Helper;
use Cake\View\View;

/**
 * Post helper
 */
class PostHelper extends Helper {

/**
 * Default configuration.
 *
 * @var array
 */
  protected $_defaultConfig = [];

}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well, the intermediate template is output to your &lt;code&gt;tmp&lt;/code&gt; directory, meaning you can use the intermediate files to figure out what PHP code will be executed when we &lt;em&gt;actually&lt;/em&gt; generate your files. One last thing is that the new View-based bake allows us to hook events into the actual bake process, which means we can add/edit/remove any data going into the view. Pretty cool.&lt;/p&gt;

&lt;p&gt;Now lets actually customize our bake templates. We’re going to customize the controller template to only bake the &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; for the issues controller, and modify the views such that the &lt;code&gt;view&lt;/code&gt; will contain a form that people can use to submit comments. To do so, lets attach an event to Bake. Add the following to your &lt;code&gt;app/config/bootstrap_cli.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Event\Event;
use Cake\Event\EventManager;
use Cake\Utility\Hash;

EventManager::instance()-&amp;gt;attach(function (Event $event) {
    $view = $event-&amp;gt;subject;
    $name = Hash::get($view-&amp;gt;viewVars, 'name');
    $isController = strpos($event-&amp;gt;data[0], 'Bake/Controller/controller.ctp') !== false;
    if ($isController !== false &amp;amp;&amp;amp; $name == 'Issues') {
        $view-&amp;gt;viewVars['actions'] = ['index', 'view', 'add'];
    }
    if ($isController &amp;amp;&amp;amp; $name == 'Comments') {
        $view-&amp;gt;viewVars['actions'] = ['add'];
    }
}, 'Bake.beforeRender');
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;In CakePHP 3, shells all include the new &lt;code&gt;app/config/bootstrap_cli.php&lt;/code&gt;, as well as the &lt;code&gt;app/config/bootstrap.php&lt;/code&gt;, which makes cli-only changes like the above a breeze.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This event will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Attach to the event &lt;code&gt;Bake.beforeRender&lt;/code&gt;, which allows us to modify any data going into the template.&lt;/li&gt;
  &lt;li&gt;Retrieve the &lt;code&gt;name&lt;/code&gt; of the template (baked tests do not currently populate this variable).&lt;/li&gt;
  &lt;li&gt;If the &lt;code&gt;filename&lt;/code&gt; ends with &lt;code&gt;Bake/Controller/controller.ctp&lt;/code&gt; - the template used for controllers - and we are baking “issues”, it will force the actions to be just &lt;code&gt;['index', 'view', 'add']&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We also only allow &lt;code&gt;add&lt;/code&gt; for the &lt;code&gt;Comments&lt;/code&gt; controller&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test this, lets run bake:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ssh onto the vm
vagrant ssh

cd /vagrant/app
bin/cake bake controller comments --force
bin/cake bake controller issues --force
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bake will force-overwrite (using the &lt;code&gt;--force&lt;/code&gt; argument) your existing Controller and it’s test. If you open them in your editor, you’ll see we only have our desired three actions! The overide for our Comments controller is also in effect :)&lt;/p&gt;

&lt;p&gt;One thing we’ll want to do is exclude &lt;code&gt;GET&lt;/code&gt; requests to the &lt;code&gt;/comments/add&lt;/code&gt; endpoint. Users should only post to it from the form that will be embedded on the &lt;code&gt;/issues/view&lt;/code&gt; page, and it should also redirect back to the issue. After the line setting actions for the &lt;code&gt;Comments&lt;/code&gt; controller, add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$view-&amp;gt;set('redirect', '[&quot;controller&quot; =&amp;gt; &quot;Issues&quot;, &quot;action&quot; =&amp;gt; &quot;view&quot;, $comment-&amp;gt;issue_id]');
$view-&amp;gt;set('requirePost', true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above two variables will be used in our custom &lt;code&gt;src/Template/Bake/Element/Controller/add.ctp&lt;/code&gt;. Controllers use elements to bake each action - meaning we can create custom actions as elements in the aforementioned directory - and the add action is no different. While you can copy the core one to that location, I’ll just show you the updated version we’ll be using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;%
$compact = [&quot;'&quot; . $singularName . &quot;'&quot;];
if (empty($redirect)) {
    $redirect = &quot;['action' =&amp;gt; 'index']&quot;;
}
%&amp;gt;

/**
 * Add method
 *
 * @return void
 */
    public function add() {
&amp;lt;% if (!empty($requirePost)) : %&amp;gt;
        if (!$this-&amp;gt;request-&amp;gt;is('post')) {
            $this-&amp;gt;Flash-&amp;gt;error('This action requires a post request');
            $this-&amp;gt;redirect($this-&amp;gt;request-&amp;gt;referer());
        }
&amp;lt;% endif; %&amp;gt;
        $&amp;lt;%= $singularName %&amp;gt; = $this-&amp;gt;&amp;lt;%= $currentModelName %&amp;gt;-&amp;gt;newEntity($this-&amp;gt;request-&amp;gt;data);
        if ($this-&amp;gt;request-&amp;gt;is('post')) {
            if ($this-&amp;gt;&amp;lt;%= $currentModelName; %&amp;gt;-&amp;gt;save($&amp;lt;%= $singularName %&amp;gt;)) {
                $this-&amp;gt;Flash-&amp;gt;success('The &amp;lt;%= strtolower($singularHumanName) %&amp;gt; has been saved.');
                return $this-&amp;gt;redirect(&amp;lt;%= $redirect %&amp;gt;);
            } else {
                $this-&amp;gt;Flash-&amp;gt;error('The &amp;lt;%= strtolower($singularHumanName) %&amp;gt; could not be saved. Please, try again.');
            }
        }
&amp;lt;%
        $associations = array_merge(
            $this-&amp;gt;Bake-&amp;gt;aliasExtractor($modelObj, 'BelongsTo'),
            $this-&amp;gt;Bake-&amp;gt;aliasExtractor($modelObj, 'BelongsToMany')
        );
        foreach ($associations as $assoc):
            $association = $modelObj-&amp;gt;association($assoc);
            $otherName = $association-&amp;gt;target()-&amp;gt;alias();
            $otherPlural = $this-&amp;gt;_variableName($otherName);
%&amp;gt;
        $&amp;lt;%= $otherPlural %&amp;gt; = $this-&amp;gt;&amp;lt;%= $currentModelName %&amp;gt;-&amp;gt;&amp;lt;%= $otherName %&amp;gt;-&amp;gt;find('list');
&amp;lt;%
            $compact[] = &quot;'$otherPlural'&quot;;
        endforeach;
%&amp;gt;
        $this-&amp;gt;set(compact(&amp;lt;%= join(', ', $compact) %&amp;gt;));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two small changes here. One is that we default the redirect to a string containing the “index” action. This is a custom variable we added - and are overriding just for the &lt;code&gt;Comments&lt;/code&gt; controller. The &lt;code&gt;$requirePost&lt;/code&gt; variable is also a custom one, and we inserted a bit of logic to require that the request is a post, otherwise we redirect to the referring page :)&lt;/p&gt;

&lt;p&gt;We’ll now modify the &lt;code&gt;view.ctp&lt;/code&gt;  template to include a post form on the issues controller. You can copy the existing one to something we can modify with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;TEMPLATE_DIR=&quot;src/Template/Bake/&quot;
BAKE_TEMPLATE_DIR=&quot;vendor/cakephp/cakephp/src/Template/Bake/&quot;
cd /vagrant/app
mkdir -p $TEMPLATE_DIR
cp $BAKE_TEMPLATE_DIR/Template/view.ctp $TEMPLATE_DIR/Template/view.ctp

## Copy over the form.ctp element file so we can do some light editing
cp $BAKE_TEMPLATE_DIR/Element/form.ctp $TEMPLATE_DIR/Element/form.ctp

## Also copy over the controller's view.ctp action file
cp $BAKE_TEMPLATE_DIR/Element/Controller/view.ctp $TEMPLATE_DIR/Element/Controller/view.ctp

## Create a stub element for later use:
touch $TEMPLATE_DIR/Element/add_related.ctp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to modify the &lt;code&gt;form.ctp&lt;/code&gt; to allow us to set a custom action for the &lt;code&gt;POST&lt;/code&gt; request. The following bit of code should replace the line containing &lt;code&gt;$this-&amp;gt;Form-&amp;gt;create&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= $this-&amp;gt;Form-&amp;gt;create($&amp;lt;%= $singularVar %&amp;gt;, &amp;lt;% if (empty($formOptions)) : %&amp;gt;[]&amp;lt;% else : %&amp;gt;&amp;lt;%= var_export($formOptions) %&amp;gt;&amp;lt;% endif;%&amp;gt;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I order to show the related form, we’ll need to modify the &lt;code&gt;Bake/Template/view.ctp&lt;/code&gt; we copied over. It’s rather long and complicated, but we’ll simply add the following line to the end:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;%
if (!empty($relatedForm)) {
  $this-&amp;gt;element('add_related', $relatedForm);
}
%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, set the following contents in your &lt;code&gt;add_related.ctp&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;%= $this-&amp;gt;element('form', $relatedForm) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the initial setup is done, we need to populate this new &lt;code&gt;$relatedForm&lt;/code&gt; variable in our &lt;code&gt;Bake.beforeRender&lt;/code&gt; event. The following event will do just that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\ORM\TableRegistry;

EventManager::instance()-&amp;gt;attach(function (Event $event) {
    $view = $event-&amp;gt;subject;
    $name = Hash::get($view-&amp;gt;viewVars, 'pluralHumanName');
    $isAddView = strpos($event-&amp;gt;data[0], 'Bake/Template/view.ctp') !== false;
    if ($isAddView &amp;amp;&amp;amp; $name == 'Issues') {
        $modelObj = TableRegistry::get('Comments');
        $view-&amp;gt;set('relatedForm', [
            'action' =&amp;gt; 'Add',
            'schema' =&amp;gt; $modelObj-&amp;gt;schema(),
            'primaryKey' =&amp;gt; (array)$modelObj-&amp;gt;primaryKey(),
            'displayField' =&amp;gt; $modelObj-&amp;gt;displayField(),
            'singularVar' =&amp;gt; 'comment',
            'pluralVar' =&amp;gt; 'comments',
            'singularHumanName' =&amp;gt; 'Comment',
            'pluralHumanName' =&amp;gt; 'Comments',
            'fields' =&amp;gt; $modelObj-&amp;gt;schema()-&amp;gt;columns(),
            'associations' =&amp;gt; [],
            'keyFields' =&amp;gt; [],
            'formOptions' =&amp;gt; [
                'url' =&amp;gt; [
                    'controller' =&amp;gt; 'Comments',
                    'action' =&amp;gt; 'add',
                ],
            ],
        ]);
    }
}, 'Bake.beforeRender');
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can always bind more than one listener to the event, so this is fine. If you want, you can also combine the two events, but this is easier to keep track of for me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the above seems like a lot, that’s because it is. Those variables are necessary for the &lt;code&gt;form.ctp&lt;/code&gt; element to do it’s magic. Unfortunately, there isn’t a good way to generically call this for a template from the core, but a solution may come soon. In any case, a couple notes if you bake now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There will be another &lt;code&gt;actions&lt;/code&gt; list right above the form. This is currently not optional in the core &lt;code&gt;form.ctp&lt;/code&gt; we copied, though you are welcome to make it optional in your own :)&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;issue_id&lt;/code&gt; field isn’t hidden. We cannot arbitrarily pass in options for fields in the core &lt;code&gt;form.ctp&lt;/code&gt; we copied. Again, you can implement this feature in your own custom element, but we’ll try and make this easier before a final release :)&lt;/li&gt;
  &lt;li&gt;The form will break because we are missing a &lt;code&gt;$comment&lt;/code&gt; entity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To add the &lt;code&gt;$comment&lt;/code&gt; entity, lets modify the &lt;code&gt;src/Template/Bake/Element/Controller/view.ctp&lt;/code&gt; we previously copied over. Add the following before the last brace:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;% if (!empty($addRelatedEntity)) : %&amp;gt;
        $&amp;lt;%= $addRelatedEntity['entityName'] %&amp;gt; = $this-&amp;gt;&amp;lt;%= $currentModelName %&amp;gt;-&amp;gt;&amp;lt;%= $addRelatedEntity['modelName'] %&amp;gt;-&amp;gt;newEntity();
        $this-&amp;gt;set('&amp;lt;%= $addRelatedEntity['entityName'] %&amp;gt;', $&amp;lt;%= $addRelatedEntity['entityName'] %&amp;gt;);
        $this-&amp;gt;set('&amp;lt;%= $pluralName %&amp;gt;', [
          $&amp;lt;%= $singularName %&amp;gt;-&amp;gt;&amp;lt;%= $modelObj-&amp;gt;primaryKey() %&amp;gt; =&amp;gt; $&amp;lt;%= $singularName %&amp;gt;-&amp;gt;&amp;lt;%= $modelObj-&amp;gt;displayField() %&amp;gt;,
        ]);
&amp;lt;% endif %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new entity for the related model&lt;/li&gt;
  &lt;li&gt;Set that empty entity for the view&lt;/li&gt;
  &lt;li&gt;Set a dummy list for the form containing just the current issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To populate the &lt;code&gt;view.ctp&lt;/code&gt; Controller template properly, we’ll need to add one more event to our &lt;code&gt;app/config/bootstrap_cli.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;EventManager::instance()-&amp;gt;attach(function (Event $event) {
    $view = $event-&amp;gt;subject;
    $name = Hash::get($view-&amp;gt;viewVars, 'name');
    $isController = strpos($event-&amp;gt;data[0], 'Bake/Controller/controller.ctp') !== false;
    if ($isController !== false &amp;amp;&amp;amp; $name == 'Issues') {
        $view-&amp;gt;viewVars['addRelatedEntity'] = [
            'modelName' =&amp;gt; 'Comments',
            'entityName' =&amp;gt; 'comment',
        ];
    }
}, 'Bake.beforeRender');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets run bake:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd /vagrant/app

bin/cake bake controller issues --force
bin/cake bake view issues --force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’ll have a working form on our view page!&lt;/p&gt;

&lt;h2 id=&quot;homework-time&quot;&gt;Homework Time&lt;/h2&gt;

&lt;p&gt;I won’t write &lt;em&gt;all&lt;/em&gt; the code, but hopefully the above gives you a good idea as to how to modify bake templates. Your homework is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make the form actions optional - and turn them off for embedded forms.&lt;/li&gt;
  &lt;li&gt;Create a nicer comment list than the current version.&lt;/li&gt;
  &lt;li&gt;Hide the &lt;code&gt;issue_id&lt;/code&gt; field on the form without removing it completely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tomorrow’s CakeAdvent entry will contain a solution, but this should be a good way for you to start creating your own custom bake templates :) Until then!&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Dec 2014 16:22:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/03/customizing-bake-and-installing-plugins-with-cakephp-3/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/03/customizing-bake-and-installing-plugins-with-cakephp-3/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        <category>bake</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Designing an anonymous issue tracker in CakePHP</title>
        <description>&lt;p&gt;This CakeAdvent 2014 tutorial will walk you through the creation of a simple anonymous issue tracking application using CakePHP 3. To start with, we’ll be setting up our development environment, installing our app template, creating our database, and using the tools CakePHP provides to get our application up fast.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Lets start by cloning the &lt;a href=&quot;https://github.com/friendsofcake/vagrant-chef&quot;&gt;FriendsOfCake/vagrant-chef&lt;/a&gt; repository. This repository will provide a full-featured cakephp working environment within a virtual linux server, allowing us to use each and every feature our app will need without worrying about how to install software on our machines.&lt;/p&gt;

&lt;p&gt;Assuming you already installed Git, Vagrant and Virtualbox, you can simply clone the &lt;code&gt;FriendsOfCake/vagrant-chef&lt;/code&gt; repo and start the virtual machine. This should take around 5 minutes on a decent DSL connection, and need only be done once.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone git@github.com:FriendsOfCake/vagrant-chef.git anonymous-issues
cd anonymous-issues

# bring up the working vm
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the virtualmachine is running, you can ssh onto it. Windows users will need to use &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;Putty&lt;/a&gt; or similar, but please refer to the vagrant docs on how to connect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ssh onto the vm
vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you are connected to your development environment, you should be able to create an application. &lt;code&gt;FriendsOfCake/vagrant-chef&lt;/code&gt; currently expects the application to be available in it’s &lt;code&gt;app&lt;/code&gt; directory, so we’ll keep that in mind.&lt;/p&gt;

&lt;p&gt;As of CakePHP 3, we create new applications using the &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; &lt;code&gt;create-project&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer create-project --prefer-dist -s dev cakephp/app app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the above will have output similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Installing cakephp/app (dev-master 28008873514274db441338eff5e2d07e75274f48)
  - Installing cakephp/app (dev-master master)
    Downloading: 100%

Created project in app
Loading composer repositories with package information
Installing dependencies (including require-dev)
  - Installing cakephp/plugin-installer (0.0.1)
    Downloading: 100%

  - Installing aura/installer-default (1.0.0)
    Downloading: 100%

  - Installing nesbot/carbon (1.13.0)
    Downloading: 100%

  - Installing psr/log (1.0.0)
    Downloading: 100%

  - Installing aura/intl (1.1.1)
    Downloading: 100%

  - Installing ircmaxell/password-compat (v1.0.4)
    Downloading: 100%

  - Installing cakephp/cakephp (3.0.x-dev 360c04e)
    Downloading: 100%

  - Installing cakephp/debug_kit (3.0.x-dev 8a6f3da)
    Downloading: 100%

  - Installing mobiledetect/mobiledetectlib (2.8.11)
    Downloading: 100%

  - Installing d11wtq/boris (v1.0.8)
    Downloading: 100%

Writing lock file
Generating autoload files
Created `config/app.php` file
Permissions set on /vagrant/app/tmp/cache
Permissions set on /vagrant/app/tmp/cache/models
Permissions set on /vagrant/app/tmp/cache/persistent
Permissions set on /vagrant/app/tmp/cache/views
Permissions set on /vagrant/app/tmp/sessions
Permissions set on /vagrant/app/tmp/tests
Permissions set on /vagrant/app/tmp
Permissions set on /vagrant/app/logs
Updated Security.salt value in config/app.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In previous versions of cake, you would need to configure your security salt and change permissions, though we now take care of this for you automatically. You’ll still need to change your database permissions in your &lt;code&gt;app/config/app.php&lt;/code&gt; file. &lt;code&gt;FriendsOfCake/vagrant-chef&lt;/code&gt; comes preinstalled with many datastores, so we’ll use MySQL for this sample application. The following are the credentials you will need to change in your &lt;code&gt;app/config/app.php&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;username: &lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;password: &lt;code&gt;bananas&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;database: &lt;code&gt;database_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we’ve setup our database, we can import an initial schema into our app. There is currently no automated way to create a schema - though it’s coming quite soon - so we’ll connect to MySQL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mysql -uroot -pbananas
# run the following command within the mysql connection
use database_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And import the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE `comments` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `issue_id` int(11) DEFAULT NULL,
  `email_address` varchar(255) DEFAULT NULL,
  `comment` text,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `issues` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `text` text,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disconnecting from the mysql terminal will drop us back into our linux virtualmachine, where we can now generate some general application scaffolding using the Bake utility. &lt;code&gt;Bake&lt;/code&gt; is a CakePHP command-line utility that allows us to template out various types of files. We could, for instance, template out custom migration files if we installed the Migrations plugin. In our case, we’re going to use it to generate Controllers, Table classes, Entities, and Template files for our &lt;code&gt;issues&lt;/code&gt; table. This allows us to skip a lot of the boring work of creating various files that won’t vary much from application to application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd /vagrant/app
bin/cake bake all issues
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to http://192.168.13.37/issues, you’ll see your baked app in action. If you browse to http://192.168.13.37/, you’ll see that we have the generic CakePHP 3 landing page. Rather than show this to our users, lets show them the issues page by default.&lt;/p&gt;

&lt;p&gt;CakePHP 3’s routing layer - which is specified in the &lt;code&gt;app/config/routes.php&lt;/code&gt; file - uses scoped routes. This means that you can do stuff like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
Router::scope('/blog', ['plugin' =&amp;gt; 'Blog'], function ($routes) {
    $routes-&amp;gt;connect('/', ['controller' =&amp;gt; 'Articles']);
});
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our case, we’re going to use the default scope and change the routes.php file to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Plugin;
use Cake\Routing\Router;

Router::scope('/', function ($routes) {
  $routes-&amp;gt;connect('/', ['controller' =&amp;gt; 'Issues', 'action' =&amp;gt; 'index']);

  $routes-&amp;gt;fallbacks();
});
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We removed the &lt;code&gt;/pages/*&lt;/code&gt; catch-all route. This isn’t necessary unless you have static pages, which our app will not.&lt;/li&gt;
  &lt;li&gt;We also removed plugin routing. This decreases the time it takes for the router class to process all the routes, though will break routing for any plugins. We can always add it back in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if you browse to http://192.168.13.37/, you’ll see our default &lt;code&gt;issues&lt;/code&gt; index page!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The above went by really quickly, and while it’s still early, our application looks pretty good already. We have a working development environment with any datastore we need, a scaffolded app via the excellent Composer package, been introduced to the Bake Shell, and learned a little about customizing our routes. What’s next?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Customizing our bake templates to make baking faster in the future&lt;/li&gt;
  &lt;li&gt;Generating Schema migrations from the command-line&lt;/li&gt;
  &lt;li&gt;Attaching comments to issues and associating them automatically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll cover those in the next installment of CakeAdvent 2014. Be sure to follow along as via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;http://josediazgonzalez.com/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2014 CakeAdvent Calendar. Come back tomorrow (if you’re reading this on the 2nd of December!) for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Dec 2014 16:22:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/02/designing-a-store-application-in-cakephp/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/02/designing-a-store-application-in-cakephp/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        <category>composer</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>CakePHP Advent Calendar 2014</title>
        <description>&lt;p&gt;Last year for the Advent Calendar, I brought to you &lt;a href=&quot;/2013/12/01/testing-your-cakephp-plugins-with-travis/&quot;&gt;25 delicious posts&lt;/a&gt; surrounding writing better CakePHP applications. Those posts catered to both the beginner and advanced CakePHP developer, and hopefully can still be of some use to you.&lt;/p&gt;

&lt;p&gt;This year, however, we’re going to kick it up a notch and actually use our skills to design 3 custom &lt;a href=&quot;http://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; applications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An anonymous markdown-based issue tracker capable of sending email notifications and exposing webhooks&lt;/li&gt;
  &lt;li&gt;A simple cart system with user authentication and payment processing&lt;/li&gt;
  &lt;li&gt;A simple tumblr clone with support for post type extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-bit-of-background&quot;&gt;A bit of background&lt;/h2&gt;

&lt;p&gt;As some of you may be aware, &lt;a href=&quot;http://bakery.cakephp.org/articles/markstory/2014/11/17/cakephp_3_0_0-beta3_released&quot;&gt;CakePHP 3&lt;/a&gt; is right around the corner. With just two RCs left, it’s almost ready for prime-time with lots of great changes. Unfortunately, this also means that some of the old knowledge we had is no longer applicable, and so rather than try to introduce CakePHP 3 features in one-off tutorials, we will showcase the power of the new framework to build working applications.&lt;/p&gt;

&lt;h2 id=&quot;why-3-tutorials&quot;&gt;Why 3 tutorials?&lt;/h2&gt;

&lt;p&gt;CakePHP 3 is coming out, so we should match it with the same number. It also helps that an Advent Calendar is 25 days, so we’ll have an interlude between each tutorial series.&lt;/p&gt;

&lt;h2 id=&quot;who-are-these-tutorials-aimed-at&quot;&gt;Who are these tutorials aimed at?&lt;/h2&gt;

&lt;p&gt;You should have some knowledge of the PHP language, and knowledge of any MVC framework will help. That said, new CakePHP developers will hopefully grow more comfortable as we progress with the tutorials.  We’ll be laying the foundation for effective application development - via working local development environments and production code deployment.&lt;/p&gt;

&lt;p&gt;For experienced CakePHP developers, these series of tutorials will be designed to point out changes from the 2.x series. Note that we’ll be a bit light on tests - this is a purposeful change to make following the tutorials a bit easier, but don’t be afraid to practice TDD.&lt;/p&gt;

&lt;p&gt;For CakePHP haters, these tutorials are meant to show development practices in another framework. We will be using community libraries where possible, and thus most of the applications we are building will be possible to build in other frameworks. As CakePHP 3 is quite modular, you are welcome to incorporate both developed application code as well as CakePHP 3 libraries in your non-CakePHP projects.&lt;/p&gt;

&lt;h2 id=&quot;what-do-i-need&quot;&gt;What do I need?&lt;/h2&gt;

&lt;p&gt;These tutorials are completely free, and there will be no cost for any of the tools we use (other than your computer!). You’ll want to setup the following before reading these tutorials:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;a href=&quot;https://github.com/&quot;&gt;Github account&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku account&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; if you are not on a Mac&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt; or &lt;a href=&quot;http://www.vmware.com/products/fusion&quot;&gt;Vmware Fusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please ensure you have all of the above setup, as otherwise certain portions of the tutorials will not make sense.&lt;/p&gt;

&lt;p&gt;Note that not every tutorial will use the above tools, and you are free to use alternatives if you so desire.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-get-started&quot;&gt;How do I get started?&lt;/h2&gt;

&lt;p&gt;I’ll be posting new posts in the series each day of the Advent Calendar, and tweeting about it as &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;http://josediazgonzalez.com/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2014 CakeAdvent Calendar. Come back tomorrow (if you’re reading this on the 1st of December!) for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Dec 2014 17:24:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/01/cakephp-advent-calendar-2014/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/01/cakephp-advent-calendar-2014/</guid>
        
        <category>cakeadvent-2014</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Work Items</title>
        <description>&lt;p&gt;Areas of active interest over the next few months. This is a brain dump, and a much better way of tracking wtf I want to do than the current todo-list method I’ve been using. I doubt I’ll get half this crap done.&lt;/p&gt;

&lt;h2 id=&quot;software-as-a-service&quot;&gt;Software as a Service&lt;/h2&gt;

&lt;p&gt;Some day I would like to have tens of dollars come into my bank account every month. Here are two pieces of software I am writing in the hopes that people will want to pay me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writing a SaaS Wiki platform.
    &lt;ul&gt;
      &lt;li&gt;Needs some sort of inline wiki editor. Haven’t looked too hard, and I figure I could write one if need be.&lt;/li&gt;
      &lt;li&gt;Need to extend the markdown parser (cebe/markdown) to support lots of extensions useful wiki extensions. Yes, it’s markdown based, and yes, I realize you can use a Github repo/wiki or something instead. Or an existing wiki solution.&lt;/li&gt;
      &lt;li&gt;Should probably hire people to audit cebe/markdown for security issues&lt;/li&gt;
      &lt;li&gt;I need a better styling than the bullshit I came up with when drunk. Not that it’s bad, but I was drunk.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Writing a SaaS Book Editing tool.
    &lt;ul&gt;
      &lt;li&gt;I originally wrote one to make it easy for me to allow people to edit my own book, and I figure it might be useful to other people.&lt;/li&gt;
      &lt;li&gt;Needs to support context for comments&lt;/li&gt;
      &lt;li&gt;Missing comment notifications&lt;/li&gt;
      &lt;li&gt;No way to currently mark a comment as “resolved”, which makes it a pita to have to review old comments.&lt;/li&gt;
      &lt;li&gt;Need to support giving users access to books as well as limiting them to certain chapters. Currently I need to insert a database record, and that won’t work in production.&lt;/li&gt;
      &lt;li&gt;Need to support multiple “owners” of a book. Maybe like book organizations or something. Might need to rework the permission system.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fun-side-projects&quot;&gt;Fun side projects&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A yes/no domain hosting platform. You point a domain at the yes/no generator, pay $10 a year, and get stats/an api to switch the yes/no to something else.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://humanslol.org/&quot;&gt;humanslol.org&lt;/a&gt; needs to be a thing.&lt;/li&gt;
  &lt;li&gt;Making &lt;a href=&quot;https://twitter.com/savant/status/520684357946994688&quot;&gt;more 8-bit paintings&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blogging&quot;&gt;Blogging&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CakeAdvent 2014 is going to be a thing - &lt;a href=&quot;/tags/CakeAdvent-2013/&quot;&gt;last year&lt;/a&gt; was tres excellent - and I’m currently gathering material&lt;/li&gt;
  &lt;li&gt;Bringing back my &lt;a href=&quot;/tags/daily-dev-log/&quot;&gt;daily dev log&lt;/a&gt; in some fashion. It helped me formulate my plans - most work ended up being spread out over a series of a few days.&lt;/li&gt;
  &lt;li&gt;A few tutorial posts I started but never completed, plus things people ask about in my issue tracker.&lt;/li&gt;
  &lt;li&gt;Writing more tutorials on operations-type things, which will give me an excuse to learn how to use said tools.&lt;/li&gt;
  &lt;li&gt;Updates to my blog to make discovering content a bit easier, as well as styling and blah blah fucking blah.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;books&quot;&gt;Books&lt;/h2&gt;

&lt;p&gt;I’m writing/rewriting a few books, mostly on CakePHP.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A book on using &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Python Fabric&lt;/a&gt; for various things.
    &lt;ul&gt;
      &lt;li&gt;Based on some of the things I’ve done at work/to support work.&lt;/li&gt;
      &lt;li&gt;Using it as an api, writing custom decorators, integrating with AWS, fixing logging, writing Web UIs, etc. Should be a small but fun one.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updating my &lt;a href=&quot;/cakephp-book/&quot;&gt;current CakePHP book&lt;/a&gt; to 3.x.
    &lt;ul&gt;
      &lt;li&gt;I’m about half-way done, but need to redo certain chapters as the CakePHP apis change a bit in certain cases.&lt;/li&gt;
      &lt;li&gt;Want to also add two new chapters:
        &lt;ul&gt;
          &lt;li&gt;Versioning Pastes&lt;/li&gt;
          &lt;li&gt;Adding a simple api with oauth integration&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Converting a tutorial series to CakePHP 3.x.
    &lt;ul&gt;
      &lt;li&gt;The original writer has given me permission, just need to actually write the content.&lt;/li&gt;
      &lt;li&gt;Aimed towards intro CakePHP users, so different target from my first one.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-source&quot;&gt;Open Source&lt;/h2&gt;

&lt;p&gt;As always, I’m heavily involved in both my own and community projects. Poop.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://beaver.readthedocs.org/&quot;&gt;Beaver&lt;/a&gt; needs a whole lot of love :( . I wish I had time to work on it/improve it, as I learned a lot during the process and I know there are things I can improve.&lt;/li&gt;
  &lt;li&gt;I started helping maintain &lt;a href=&quot;https://github.com/progrium/dokku&quot;&gt;Dokku&lt;/a&gt; - a single-server heroku alternative.
    &lt;ul&gt;
      &lt;li&gt;The original maintainer was burned out I guess. NBD, shit happens. I think he’s starting to pickup some steam, so hopefully we can continue on with this.&lt;/li&gt;
      &lt;li&gt;Lots of pull requests and issues to triage. I closed ~60 issues and merged ~19 pull requests over the past week. My goal is zero bugs by the time we hit our 0.4.0 release, so stabilizing the external api is pretty important.&lt;/li&gt;
      &lt;li&gt;I personally made 22 commits over the past few days. It’s been a good way to exercise my bash-fu.&lt;/li&gt;
      &lt;li&gt;Tests still fail, and I don’t have access to the webserver that runs them or even the script that handles test-running :( . We’ll get that sorted out though, I’m sure.&lt;/li&gt;
      &lt;li&gt;I’d like to write a simple web ui for it and integrate it with AWS services - RDS, ElastiCache, backups - and potentially sell that web ui as a product. Not that anyone would/should buy it. I’ve always wanted to write web tools to automate servers…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lots of &lt;a href=&quot;/open-source/&quot;&gt;CakePHP open source&lt;/a&gt;…
    &lt;ul&gt;
      &lt;li&gt;Move &lt;a href=&quot;https://github.com/friendsofcake/vagrant-chef&quot;&gt;friendsofcake/vagrant-chef&lt;/a&gt; to support more of a heroku-style deploy for any PHP framework. Would be extremely nice if users of the project could just have their framework auto-detected and be able to work.&lt;/li&gt;
      &lt;li&gt;Work on &lt;a href=&quot;https://github.com/friendsofcake/crud-view&quot;&gt;friendsofcake/crud-view&lt;/a&gt;. I started a while back, but it needs a lot of love and a dedicated developer. It’s basically scaffolding on steroids.&lt;/li&gt;
      &lt;li&gt;Updating a bunch of plugins to CakePHP 3.x.&lt;/li&gt;
      &lt;li&gt;Marking a bunch of plugins as deprecated and pointing users to alternatives&lt;/li&gt;
      &lt;li&gt;Adding support to filter out 3.x from 2.x plugins on the CakePHP plugins site&lt;/li&gt;
      &lt;li&gt;Making a new version of the &lt;a href=&quot;https://github.com/friendsofcake/app-template/&quot;&gt;friendsofcake/app-template&lt;/a&gt; project for 3.x. Much simpler now that CakePHP 3 has built-in support for using DSNs for connection strings, but still has to be done at some point. Will be necessary for my book.&lt;/li&gt;
      &lt;li&gt;Contributing cli-based migration generation for &lt;a href=&quot;https://phinx.org/&quot;&gt;phinx&lt;/a&gt;. We have r&lt;a href=&quot;https://github.com/CakeDC/migrations/blob/master/Docs/Documentation/Generate-Migrations-Without-DB-Interaction.md&quot;&gt;ails-like migration generation&lt;/a&gt; in CakePHP 2.x, but now that we’re adopting a community library, we need to port that feature. Won’t be hard as the basic structure is already there.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Generic PHP queuing library.
    &lt;ul&gt;
      &lt;li&gt;I already have a version I stopped working on last year called &lt;a href=&quot;https://github.com/josegonzalez/php-queuesadilla&quot;&gt;php-queuesadilla&lt;/a&gt;, though it needs some love and care before it can be considered general use. It also needs to use proper queuing systems (rabbit and zero are missing).&lt;/li&gt;
      &lt;li&gt;All the existing ones suck or pull in quite a few requirements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;work-related-stuff&quot;&gt;Work-related stuff&lt;/h2&gt;

&lt;p&gt;There’s other, more important crap, but one does not simply post all the things. The stuff here will likely be open source if it already isn’t.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An integration between ruby’s ERB templates and consul. Should let me re-use chef templates rather than needing to maintain them in two places.&lt;/li&gt;
  &lt;li&gt;Make it easier to interact with &lt;a href=&quot;https://github.com/seatgeek/cronq&quot;&gt;cronq&lt;/a&gt;, a distributed cron-like system. Also have a few logging improvements to make, and the codebase isn’t the greatest thing…&lt;/li&gt;
  &lt;li&gt;Making &lt;a href=&quot;https://github.com/seatgeek/graphite-pager&quot;&gt;graphite-pager&lt;/a&gt; scale slightly better, perhaps by rewriting it to be a statsd clone so that it can introspect on data rather than retreiving it during a check.&lt;/li&gt;
  &lt;li&gt;Clean up a php-aqmp job system we have (unrelated to my own open source work). You know, to be good open-source citizens.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tldr-im-hella-busy&quot;&gt;tl;dr I’m hella busy&lt;/h4&gt;
</description>
        <pubDate>Sun, 16 Nov 2014 19:47:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/11/16/work-items/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/11/16/work-items/</guid>
        
        <category>development</category>
        
        
        <category>dev log</category>
        
      </item>
    
  </channel>
</rss>
