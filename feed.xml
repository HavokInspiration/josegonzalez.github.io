<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jose Diaz-Gonzalez</title>
    <description>Developer, Accidental Ops Guy, and CakePHP Core Developer</description>
    <link>http://josediazgonzalez.com/</link>
    <atom:link href="http://josediazgonzalez.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 04 Dec 2014 23:15:35 +0000</pubDate>
    <lastBuildDate>Thu, 04 Dec 2014 23:15:35 +0000</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>Schema Migrations with CakePHP 3</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;I corrected a few issues with the previous post regarding the redirect and &lt;code&gt;requirePost&lt;/code&gt; event. They’ve been corrected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our previous post, I gave you all some homework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make the form actions optional - and turn them off for embedded forms.&lt;/li&gt;
  &lt;li&gt;Create a nicer comment list than the current version.&lt;/li&gt;
  &lt;li&gt;Hide the &lt;code&gt;issue_id&lt;/code&gt; field on the form without removing it completely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the first task, you can extract the form actions into a separate element and make the inclusion of that element conditional - default true - on a variable you specify from the event.&lt;/p&gt;

&lt;p&gt;For the second task, using a custom element for related entities is the way to go.&lt;/p&gt;

&lt;p&gt;For the third task, you will want to populate a new variable - lets call it &lt;code&gt;$inputOptions&lt;/code&gt; - and have it be an array of &lt;code&gt;field&lt;/code&gt; =&amp;gt; &lt;code&gt;options&lt;/code&gt; for the field. Each field being output should be in this array with a default empty array as it’s options. You can use the &lt;code&gt;BakeHelper::stringifyList&lt;/code&gt; to turn those options into a nicely formatted string array.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One thing that is a pain is managing database schema changes. While we had &lt;a href=&quot;https://github.com/cakedc/migrations&quot;&gt;CakeDC/migrations&lt;/a&gt; in the 2.x world, CakePHP 3 is about embracing existing solutions to problems. In CakePHP 3, we’ve delegated the task to the excellent &lt;a href=&quot;https://phinx.org/&quot;&gt;Phinx&lt;/a&gt; library. Phinx is a database migration tool that CakePHP provides a wrapper for with the &lt;a href=&quot;https://github.com/cakephp/migrations&quot;&gt;CakePHP/migrations&lt;/a&gt; plugin. You can use Phinx outside of CakePHP as well, so switching back and forth between CakePHP and other PHP frameworks should be a breeze.&lt;/p&gt;

&lt;p&gt;To install the migrations plugin, we’ll use composer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ssh onto the vm
vagrant ssh

cd /vagrant/app
composer require cakephp/migrations:dev-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point both phinx and the plugin will be installed. Plugins in CakePHP must be enabled before they can be used, and the CakePHP/migrations plugin is no different. Since it’s only useful on the command-line, we’ll enable it with the following code on our &lt;code&gt;app/config/bootstrap_cli.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Plugin;

Plugin::load('Migrations');
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that it’s enabled, we can generate our initial migration from the existing database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd /vagrant/app
bin/cake bake migration Initial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output should be similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Welcome to CakePHP v3.0.0-beta3 Console
---------------------------------------------------------------
App : src
Path: /vagrant/app/src/
---------------------------------------------------------------

Baking migration class for Connection default

Creating file /vagrant/app/config/Migrations/20141204225440_initial.php
Wrote `/vagrant/app/config/Migrations/20141204225440_initial.php`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we look at that file, we’ll see a phinx-style migration that contains all the information about our current database schema. This can be useful for bootstrapping a new database (though our database works just fine for now). It’s pretty similar to the old migrations plugin - you get an &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, and &lt;code&gt;change&lt;/code&gt; method - but uses an object-oriented approach to changing the database.&lt;/p&gt;

&lt;p&gt;You can rollback any migration with the &lt;code&gt;down()&lt;/code&gt; callback by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations rollback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if you have created new migrations, you can migrate up to them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One note, there is currently an issue where the Phinx library auto-includes an auto-increment &lt;code&gt;id&lt;/code&gt; field for every database. This might not be desired for certain tables, in which case you’ll want to manually disable the field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$table = $this-&amp;gt;table('statuses', [
    'id' =&amp;gt; false,
    'primary_key' =&amp;gt; ['id']
]);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more docs, see the &lt;a href=&quot;http://docs.phinx.org/en/latest/migrations.html#creating-a-new-migration&quot;&gt;phinx documentation here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;homework-time&quot;&gt;Homework Time!&lt;/h2&gt;

&lt;p&gt;This was a relatively short introduction to database migrations, but I felt it important enough to cover as we’ll be using them extensively over the next few tutorials. Your homework is actually pretty simple. We need to keep track of a &lt;code&gt;webhook_url&lt;/code&gt; string field with a length of 256 characters in our &lt;code&gt;comments&lt;/code&gt; table. Create a new migration and add the field to the table. The command to create an empty migration is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;bin/cake migrations create WebhookUrl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note, there is a bug in Phinx’s - not Cake’s! - templates where the end-docblock for the &lt;code&gt;change()&lt;/code&gt; method is in the wrong place. We’ll get that fixed up before CakePHP 3 goes stable :)&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Dec 2014 14:22:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/04/schema-migrations-with-cakephp-3/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/04/schema-migrations-with-cakephp-3/</guid>
        
        <category>CakeAdvent-2014</category>
        
        <category>cakephp</category>
        
        <category>composer</category>
        
        <category>migrations</category>
        
        <category>phinx</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Customizing Bake in CakePHP 3</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Note: There was an error in the sql schema for the comments table from yesterday’s post. If you have the old version, please change it with the following statement in mysql:&lt;/p&gt;

  &lt;p&gt;&lt;code&gt;ALTER TABLE database_name.comments CHANGE comment_id issue_id INT&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;You will also need to regenerate your model classes and clear out the cache:&lt;/p&gt;

  &lt;p&gt;bin/cake bake model comments –force&lt;br /&gt;
  bin/cake bake model issues –force&lt;br /&gt;
  bin/cake orm_cache clear&lt;/p&gt;

  &lt;p&gt;I’ve already corrected yesterdays post, so this change may not be necessary for some users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CakePHP has always had the Bake shell command - you saw it in action &lt;a href=&quot;http://josediazgonzalez.com/2014/12/02/designing-a-store-application-in-cakephp/&quot;&gt;yesterday&lt;/a&gt; - but it’s always been a bit difficult to work with. You would need to escape your actual php code, making it difficult to actually think about the contents of the template. Thanks to some excellent work by &lt;a href=&quot;http://ad7six.com/&quot;&gt;Andy Dawson&lt;/a&gt;, we now have quite a bit of flexibility in writing bake templates.&lt;/p&gt;

&lt;p&gt;In CakePHP, we can use Helpers and elements in our bake templates. As well, CakePHP uses ASP-style tags - &lt;code&gt;&amp;lt;%&lt;/code&gt;, &lt;code&gt;&amp;lt;%=&lt;/code&gt;, and &lt;code&gt;%&amp;gt;&lt;/code&gt; - to execute php code. This sounds weird, but here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace &amp;lt;%= $namespace %&amp;gt;\View\Helper;

use Cake\View\Helper;
use Cake\View\View;

/**
 * &amp;lt;%= $name %&amp;gt; helper
 */
class &amp;lt;%= $name %&amp;gt;Helper extends Helper {

/**
 * Default configuration.
 *
 * @var array
 */
  protected $_defaultConfig = [];

}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any code in enclosed in &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; is executed by CakePHP - &lt;code&gt;&amp;lt;%=&lt;/code&gt; can be used to auto-echo variables - while everything else is just normal php. The above template - when baking a &lt;code&gt;PostHelper&lt;/code&gt;, for instance - turns into the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App\View\Helper;

use Cake\View\Helper;
use Cake\View\View;

/**
 * Post helper
 */
class PostHelper extends Helper {

/**
 * Default configuration.
 *
 * @var array
 */
  protected $_defaultConfig = [];

}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well, the intermediate template is output to your &lt;code&gt;tmp&lt;/code&gt; directory, meaning you can use the intermediate files to figure out what PHP code will be executed when we &lt;em&gt;actually&lt;/em&gt; generate your files. One last thing is that the new View-based bake allows us to hook events into the actual bake process, which means we can add/edit/remove any data going into the view. Pretty cool.&lt;/p&gt;

&lt;p&gt;Now lets actually customize our bake templates. We’re going to customize the controller template to only bake the &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; for the issues controller, and modify the views such that the &lt;code&gt;view&lt;/code&gt; will contain a form that people can use to submit comments. To do so, lets attach an event to Bake. Add the following to your &lt;code&gt;app/config/bootstrap_cli.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Event\Event;
use Cake\Event\EventManager;
use Cake\Utility\Hash;

EventManager::instance()-&amp;gt;attach(function (Event $event) {
    $view = $event-&amp;gt;subject;
    $name = Hash::get($view-&amp;gt;viewVars, 'name');
    $isController = strpos($event-&amp;gt;data[0], 'Bake/Controller/controller.ctp') !== false;
    if ($isController !== false &amp;amp;&amp;amp; $name == 'Issues') {
        $view-&amp;gt;viewVars['actions'] = ['index', 'view', 'add'];
    }
    if ($isController &amp;amp;&amp;amp; $name == 'Comments') {
        $view-&amp;gt;viewVars['actions'] = ['add'];
    }
}, 'Bake.beforeRender');
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;In CakePHP 3, shells all include the new &lt;code&gt;app/config/bootstrap_cli.php&lt;/code&gt;, as well as the &lt;code&gt;app/config/bootstrap.php&lt;/code&gt;, which makes cli-only changes like the above a breeze.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This event will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Attach to the event &lt;code&gt;Bake.beforeRender&lt;/code&gt;, which allows us to modify any data going into the template.&lt;/li&gt;
  &lt;li&gt;Retrieve the &lt;code&gt;name&lt;/code&gt; of the template (baked tests do not currently populate this variable).&lt;/li&gt;
  &lt;li&gt;If the &lt;code&gt;filename&lt;/code&gt; ends with &lt;code&gt;Bake/Controller/controller.ctp&lt;/code&gt; - the template used for controllers - and we are baking “issues”, it will force the actions to be just &lt;code&gt;['index', 'view', 'add']&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We also only allow &lt;code&gt;add&lt;/code&gt; for the &lt;code&gt;Comments&lt;/code&gt; controller&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test this, lets run bake:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ssh onto the vm
vagrant ssh

cd /vagrant/app
bin/cake bake controller comments --force
bin/cake bake controller issues --force
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bake will force-overwrite (using the &lt;code&gt;--force&lt;/code&gt; argument) your existing Controller and it’s test. If you open them in your editor, you’ll see we only have our desired three actions! The overide for our Comments controller is also in effect :)&lt;/p&gt;

&lt;p&gt;One thing we’ll want to do is exclude &lt;code&gt;GET&lt;/code&gt; requests to the &lt;code&gt;/comments/add&lt;/code&gt; endpoint. Users should only post to it from the form that will be embedded on the &lt;code&gt;/issues/view&lt;/code&gt; page, and it should also redirect back to the issue. After the line setting actions for the &lt;code&gt;Comments&lt;/code&gt; controller, add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$view-&amp;gt;set('redirect', '[&quot;controller&quot; =&amp;gt; &quot;Issues&quot;, &quot;action&quot; =&amp;gt; &quot;view&quot;, $comment-&amp;gt;issue_id]');
$view-&amp;gt;set('requirePost', true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above two variables will be used in our custom &lt;code&gt;src/Template/Bake/Element/Controller/add.ctp&lt;/code&gt;. Controllers use elements to bake each action - meaning we can create custom actions as elements in the aforementioned directory - and the add action is no different. While you can copy the core one to that location, I’ll just show you the updated version we’ll be using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;%
$compact = [&quot;'&quot; . $singularName . &quot;'&quot;];
if (empty($redirect)) {
    $redirect = &quot;['action' =&amp;gt; 'index']&quot;;
}
%&amp;gt;

/**
 * Add method
 *
 * @return void
 */
    public function add() {
&amp;lt;% if (!empty($requirePost)) : %&amp;gt;
        if (!$this-&amp;gt;request-&amp;gt;is('post')) {
            $this-&amp;gt;Flash-&amp;gt;error('This action requires a post request');
            $this-&amp;gt;redirect($this-&amp;gt;request-&amp;gt;referer());
        }
&amp;lt;% endif; %&amp;gt;
        $&amp;lt;%= $singularName %&amp;gt; = $this-&amp;gt;&amp;lt;%= $currentModelName %&amp;gt;-&amp;gt;newEntity($this-&amp;gt;request-&amp;gt;data);
        if ($this-&amp;gt;request-&amp;gt;is('post')) {
            if ($this-&amp;gt;&amp;lt;%= $currentModelName; %&amp;gt;-&amp;gt;save($&amp;lt;%= $singularName %&amp;gt;)) {
                $this-&amp;gt;Flash-&amp;gt;success('The &amp;lt;%= strtolower($singularHumanName) %&amp;gt; has been saved.');
                return $this-&amp;gt;redirect(&amp;lt;%= $redirect %&amp;gt;);
            } else {
                $this-&amp;gt;Flash-&amp;gt;error('The &amp;lt;%= strtolower($singularHumanName) %&amp;gt; could not be saved. Please, try again.');
            }
        }
&amp;lt;%
        $associations = array_merge(
            $this-&amp;gt;Bake-&amp;gt;aliasExtractor($modelObj, 'BelongsTo'),
            $this-&amp;gt;Bake-&amp;gt;aliasExtractor($modelObj, 'BelongsToMany')
        );
        foreach ($associations as $assoc):
            $association = $modelObj-&amp;gt;association($assoc);
            $otherName = $association-&amp;gt;target()-&amp;gt;alias();
            $otherPlural = $this-&amp;gt;_variableName($otherName);
%&amp;gt;
        $&amp;lt;%= $otherPlural %&amp;gt; = $this-&amp;gt;&amp;lt;%= $currentModelName %&amp;gt;-&amp;gt;&amp;lt;%= $otherName %&amp;gt;-&amp;gt;find('list');
&amp;lt;%
            $compact[] = &quot;'$otherPlural'&quot;;
        endforeach;
%&amp;gt;
        $this-&amp;gt;set(compact(&amp;lt;%= join(', ', $compact) %&amp;gt;));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two small changes here. One is that we default the redirect to a string containing the “index” action. This is a custom variable we added - and are overriding just for the &lt;code&gt;Comments&lt;/code&gt; controller. The &lt;code&gt;$requirePost&lt;/code&gt; variable is also a custom one, and we inserted a bit of logic to require that the request is a post, otherwise we redirect to the referring page :)&lt;/p&gt;

&lt;p&gt;We’ll now modify the &lt;code&gt;view.ctp&lt;/code&gt;  template to include a post form on the issues controller. You can copy the existing one to something we can modify with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;TEMPLATE_DIR=&quot;src/Template/Bake/&quot;
BAKE_TEMPLATE_DIR=&quot;vendor/cakephp/cakephp/src/Template/Bake/&quot;
cd /vagrant/app
mkdir -p $TEMPLATE_DIR
cp $BAKE_TEMPLATE_DIR/Template/view.ctp $TEMPLATE_DIR/Template/view.ctp

## Copy over the form.ctp element file so we can do some light editing
cp $BAKE_TEMPLATE_DIR/Element/form.ctp $TEMPLATE_DIR/Element/form.ctp

## Also copy over the controller's view.ctp action file
cp $BAKE_TEMPLATE_DIR/Element/Controller/view.ctp $TEMPLATE_DIR/Element/Controller/view.ctp

## Create a stub element for later use:
touch $TEMPLATE_DIR/Element/add_related.ctp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to modify the &lt;code&gt;form.ctp&lt;/code&gt; to allow us to set a custom action for the &lt;code&gt;POST&lt;/code&gt; request. The following bit of code should replace the line containing &lt;code&gt;$this-&amp;gt;Form-&amp;gt;create&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= $this-&amp;gt;Form-&amp;gt;create($&amp;lt;%= $singularVar %&amp;gt;, &amp;lt;% if (empty($formOptions)) : %&amp;gt;[]&amp;lt;% else : %&amp;gt;&amp;lt;%= var_export($formOptions) %&amp;gt;&amp;lt;% endif;%&amp;gt;); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I order to show the related form, we’ll need to modify the &lt;code&gt;Bake/Template/view.ctp&lt;/code&gt; we copied over. It’s rather long and complicated, but we’ll simply add the following line to the end:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;%
if (!empty($relatedForm)) {
  $this-&amp;gt;element('add_related', $relatedForm);
}
%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, set the following contents in your &lt;code&gt;add_related.ctp&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;%= $this-&amp;gt;element('form', $relatedForm) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the initial setup is done, we need to populate this new &lt;code&gt;$relatedForm&lt;/code&gt; variable in our &lt;code&gt;Bake.beforeRender&lt;/code&gt; event. The following event will do just that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Cake\ORM\TableRegistry;

EventManager::instance()-&amp;gt;attach(function (Event $event) {
    $view = $event-&amp;gt;subject;
    $name = Hash::get($view-&amp;gt;viewVars, 'pluralHumanName');
    $isAddView = strpos($event-&amp;gt;data[0], 'Bake/Template/view.ctp') !== false;
    if ($isAddView &amp;amp;&amp;amp; $name == 'Issues') {
        $modelObj = TableRegistry::get('Comments');
        $view-&amp;gt;set('relatedForm', [
            'action' =&amp;gt; 'Add',
            'schema' =&amp;gt; $modelObj-&amp;gt;schema(),
            'primaryKey' =&amp;gt; (array)$modelObj-&amp;gt;primaryKey(),
            'displayField' =&amp;gt; $modelObj-&amp;gt;displayField(),
            'singularVar' =&amp;gt; 'comment',
            'pluralVar' =&amp;gt; 'comments',
            'singularHumanName' =&amp;gt; 'Comment',
            'pluralHumanName' =&amp;gt; 'Comments',
            'fields' =&amp;gt; $modelObj-&amp;gt;schema()-&amp;gt;columns(),
            'associations' =&amp;gt; [],
            'keyFields' =&amp;gt; [],
            'formOptions' =&amp;gt; [
                'url' =&amp;gt; [
                    'controller' =&amp;gt; 'Comments',
                    'action' =&amp;gt; 'add',
                ],
            ],
        ]);
    }
}, 'Bake.beforeRender');
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can always bind more than one listener to the event, so this is fine. If you want, you can also combine the two events, but this is easier to keep track of for me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the above seems like a lot, that’s because it is. Those variables are necessary for the &lt;code&gt;form.ctp&lt;/code&gt; element to do it’s magic. Unfortunately, there isn’t a good way to generically call this for a template from the core, but a solution may come soon. In any case, a couple notes if you bake now:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There will be another &lt;code&gt;actions&lt;/code&gt; list right above the form. This is currently not optional in the core &lt;code&gt;form.ctp&lt;/code&gt; we copied, though you are welcome to make it optional in your own :)&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;issue_id&lt;/code&gt; field isn’t hidden. We cannot arbitrarily pass in options for fields in the core &lt;code&gt;form.ctp&lt;/code&gt; we copied. Again, you can implement this feature in your own custom element, but we’ll try and make this easier before a final release :)&lt;/li&gt;
  &lt;li&gt;The form will break because we are missing a &lt;code&gt;$comment&lt;/code&gt; entity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To add the &lt;code&gt;$comment&lt;/code&gt; entity, lets modify the &lt;code&gt;src/Template/Bake/Element/Controller/view.ctp&lt;/code&gt; we previously copied over. Add the following before the last brace:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;% if (!empty($addRelatedEntity)) : %&amp;gt;
        $&amp;lt;%= $addRelatedEntity['entityName'] %&amp;gt; = $this-&amp;gt;&amp;lt;%= $currentModelName %&amp;gt;-&amp;gt;&amp;lt;%= $addRelatedEntity['modelName'] %&amp;gt;-&amp;gt;newEntity();
        $this-&amp;gt;set('&amp;lt;%= $addRelatedEntity['entityName'] %&amp;gt;', $&amp;lt;%= $addRelatedEntity['entityName'] %&amp;gt;);
        $this-&amp;gt;set('&amp;lt;%= $pluralName %&amp;gt;', [
          $&amp;lt;%= $singularName %&amp;gt;-&amp;gt;&amp;lt;%= $modelObj-&amp;gt;primaryKey() %&amp;gt; =&amp;gt; $&amp;lt;%= $singularName %&amp;gt;-&amp;gt;&amp;lt;%= $modelObj-&amp;gt;displayField() %&amp;gt;,
        ]);
&amp;lt;% endif %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new entity for the related model&lt;/li&gt;
  &lt;li&gt;Set that empty entity for the view&lt;/li&gt;
  &lt;li&gt;Set a dummy list for the form containing just the current issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To populate the &lt;code&gt;view.ctp&lt;/code&gt; Controller template properly, we’ll need to add one more event to our &lt;code&gt;app/config/bootstrap_cli.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;EventManager::instance()-&amp;gt;attach(function (Event $event) {
    $view = $event-&amp;gt;subject;
    $name = Hash::get($view-&amp;gt;viewVars, 'name');
    $isController = strpos($event-&amp;gt;data[0], 'Bake/Controller/controller.ctp') !== false;
    if ($isController !== false &amp;amp;&amp;amp; $name == 'Issues') {
        $view-&amp;gt;viewVars['addRelatedEntity'] = [
            'modelName' =&amp;gt; 'Comments',
            'entityName' =&amp;gt; 'comment',
        ];
    }
}, 'Bake.beforeRender');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets run bake:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd /vagrant/app

bin/cake bake controller issues --force
bin/cake bake view issues --force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’ll have a working form on our view page!&lt;/p&gt;

&lt;h2 id=&quot;homework-time&quot;&gt;Homework Time&lt;/h2&gt;

&lt;p&gt;I won’t write &lt;em&gt;all&lt;/em&gt; the code, but hopefully the above gives you a good idea as to how to modify bake templates. Your homework is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make the form actions optional - and turn them off for embedded forms.&lt;/li&gt;
  &lt;li&gt;Create a nicer comment list than the current version.&lt;/li&gt;
  &lt;li&gt;Hide the &lt;code&gt;issue_id&lt;/code&gt; field on the form without removing it completely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tomorrow’s CakeAdvent entry will contain a solution, but this should be a good way for you to start creating your own custom bake templates :) Until then!&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Dec 2014 16:22:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/03/customizing-bake-and-installing-plugins-with-cakephp-3/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/03/customizing-bake-and-installing-plugins-with-cakephp-3/</guid>
        
        <category>CakeAdvent-2014</category>
        
        <category>cakephp</category>
        
        <category>bake</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Designing an anonymous issue tracker in CakePHP</title>
        <description>&lt;p&gt;This CakeAdvent 2014 tutorial will walk you through the creation of a simple anonymous issue tracking application using CakePHP 3. To start with, we’ll be setting up our development environment, installing our app template, creating our database, and using the tools CakePHP provides to get our application up fast.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Lets start by cloning the &lt;a href=&quot;https://github.com/friendsofcake/vagrant-chef&quot;&gt;FriendsOfCake/vagrant-chef&lt;/a&gt; repository. This repository will provide a full-featured cakephp working environment within a virtual linux server, allowing us to use each and every feature our app will need without worrying about how to install software on our machines.&lt;/p&gt;

&lt;p&gt;Assuming you already installed Git, Vagrant and Virtualbox, you can simply clone the &lt;code&gt;FriendsOfCake/vagrant-chef&lt;/code&gt; repo and start the virtual machine. This should take around 5 minutes on a decent DSL connection, and need only be done once.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git clone git@github.com:FriendsOfCake/vagrant-chef.git anonymous-issues
cd anonymous-issues

# bring up the working vm
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the virtualmachine is running, you can ssh onto it. Windows users will need to use &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;Putty&lt;/a&gt; or similar, but please refer to the vagrant docs on how to connect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# ssh onto the vm
vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that you are connected to your development environment, you should be able to create an application. &lt;code&gt;FriendsOfCake/vagrant-chef&lt;/code&gt; currently expects the application to be available in it’s &lt;code&gt;app&lt;/code&gt; directory, so we’ll keep that in mind.&lt;/p&gt;

&lt;p&gt;As of CakePHP 3, we create new applications using the &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; &lt;code&gt;create-project&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;composer create-project --prefer-dist -s dev cakephp/app app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the above will have output similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Installing cakephp/app (dev-master 28008873514274db441338eff5e2d07e75274f48)
  - Installing cakephp/app (dev-master master)
    Downloading: 100%

Created project in app
Loading composer repositories with package information
Installing dependencies (including require-dev)
  - Installing cakephp/plugin-installer (0.0.1)
    Downloading: 100%

  - Installing aura/installer-default (1.0.0)
    Downloading: 100%

  - Installing nesbot/carbon (1.13.0)
    Downloading: 100%

  - Installing psr/log (1.0.0)
    Downloading: 100%

  - Installing aura/intl (1.1.1)
    Downloading: 100%

  - Installing ircmaxell/password-compat (v1.0.4)
    Downloading: 100%

  - Installing cakephp/cakephp (3.0.x-dev 360c04e)
    Downloading: 100%

  - Installing cakephp/debug_kit (3.0.x-dev 8a6f3da)
    Downloading: 100%

  - Installing mobiledetect/mobiledetectlib (2.8.11)
    Downloading: 100%

  - Installing d11wtq/boris (v1.0.8)
    Downloading: 100%

Writing lock file
Generating autoload files
Created `config/app.php` file
Permissions set on /vagrant/app/tmp/cache
Permissions set on /vagrant/app/tmp/cache/models
Permissions set on /vagrant/app/tmp/cache/persistent
Permissions set on /vagrant/app/tmp/cache/views
Permissions set on /vagrant/app/tmp/sessions
Permissions set on /vagrant/app/tmp/tests
Permissions set on /vagrant/app/tmp
Permissions set on /vagrant/app/logs
Updated Security.salt value in config/app.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In previous versions of cake, you would need to configure your security salt and change permissions, though we now take care of this for you automatically. You’ll still need to change your database permissions in your &lt;code&gt;app/config/app.php&lt;/code&gt; file. &lt;code&gt;FriendsOfCake/vagrant-chef&lt;/code&gt; comes preinstalled with many datastores, so we’ll use MySQL for this sample application. The following are the credentials you will need to change in your &lt;code&gt;app/config/app.php&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;username: &lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;password: &lt;code&gt;bananas&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;database: &lt;code&gt;database_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we’ve setup our database, we can import an initial schema into our app. There is currently no automated way to create a schema - though it’s coming quite soon - so we’ll connect to MySQL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mysql -uroot -pbananas
# run the following command within the mysql connection
use database_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And import the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE `comments` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `issue_id` int(11) DEFAULT NULL,
  `email_address` varchar(255) DEFAULT NULL,
  `comment` text,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `issues` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `text` text,
  `created` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disconnecting from the mysql terminal will drop us back into our linux virtualmachine, where we can now generate some general application scaffolding using the Bake utility. &lt;code&gt;Bake&lt;/code&gt; is a CakePHP command-line utility that allows us to template out various types of files. We could, for instance, template out custom migration files if we installed the Migrations plugin. In our case, we’re going to use it to generate Controllers, Table classes, Entities, and Template files for our &lt;code&gt;issues&lt;/code&gt; table. This allows us to skip a lot of the boring work of creating various files that won’t vary much from application to application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd /vagrant/app
bin/cake bake all issues
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you browse to http://192.168.13.37/issues, you’ll see your baked app in action. If you browse to http://192.168.13.37/, you’ll see that we have the generic CakePHP 3 landing page. Rather than show this to our users, lets show them the issues page by default.&lt;/p&gt;

&lt;p&gt;CakePHP 3’s routing layer - which is specified in the &lt;code&gt;app/config/routes.php&lt;/code&gt; file - uses scoped routes. This means that you can do stuff like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
Router::scope('/blog', ['plugin' =&amp;gt; 'Blog'], function ($routes) {
    $routes-&amp;gt;connect('/', ['controller' =&amp;gt; 'Articles']);
});
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our case, we’re going to use the default scope and change the routes.php file to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
use Cake\Core\Plugin;
use Cake\Routing\Router;

Router::scope('/', function ($routes) {
  $routes-&amp;gt;connect('/', ['controller' =&amp;gt; 'Issues', 'action' =&amp;gt; 'index']);

  $routes-&amp;gt;fallbacks();
});
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We removed the &lt;code&gt;/pages/*&lt;/code&gt; catch-all route. This isn’t necessary unless you have static pages, which our app will not.&lt;/li&gt;
  &lt;li&gt;We also removed plugin routing. This decreases the time it takes for the router class to process all the routes, though will break routing for any plugins. We can always add it back in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if you browse to http://192.168.13.37/, you’ll see our default &lt;code&gt;issues&lt;/code&gt; index page!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The above went by really quickly, and while it’s still early, our application looks pretty good already. We have a working development environment with any datastore we need, a scaffolded app via the excellent Composer package, been introduced to the Bake Shell, and learned a little about customizing our routes. What’s next?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Customizing our bake templates to make baking faster in the future&lt;/li&gt;
  &lt;li&gt;Generating Schema migrations from the command-line&lt;/li&gt;
  &lt;li&gt;Attaching comments to issues and associating them automatically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll cover those in the next installment of CakeAdvent 2014. Be sure to follow along as via twitter on &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;http://josediazgonzalez.com/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2014 CakeAdvent Calendar. Come back tomorrow (if you’re reading this on the 2nd of December!) for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Dec 2014 16:22:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/02/designing-a-store-application-in-cakephp/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/02/designing-a-store-application-in-cakephp/</guid>
        
        <category>CakeAdvent-2014</category>
        
        <category>cakephp</category>
        
        <category>composer</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>CakePHP Advent Calendar 2014</title>
        <description>&lt;p&gt;Last year for the Advent Calendar, I brought to you &lt;a href=&quot;/2013/12/01/testing-your-cakephp-plugins-with-travis/&quot;&gt;25 delicious posts&lt;/a&gt; surrounding writing better CakePHP applications. Those posts catered to both the beginner and advanced CakePHP developer, and hopefully can still be of some use to you.&lt;/p&gt;

&lt;p&gt;This year, however, we’re going to kick it up a notch and actually use our skills to design 3 custom &lt;a href=&quot;http://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; applications:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An anonymous markdown-based issue tracker capable of sending email notifications and exposing webhooks&lt;/li&gt;
  &lt;li&gt;A simple cart system with user authentication and payment processing&lt;/li&gt;
  &lt;li&gt;A simple tumblr clone with support for post type extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-bit-of-background&quot;&gt;A bit of background&lt;/h2&gt;

&lt;p&gt;As some of you may be aware, &lt;a href=&quot;http://bakery.cakephp.org/articles/markstory/2014/11/17/cakephp_3_0_0-beta3_released&quot;&gt;CakePHP 3&lt;/a&gt; is right around the corner. With just two RCs left, it’s almost ready for prime-time with lots of great changes. Unfortunately, this also means that some of the old knowledge we had is no longer applicable, and so rather than try to introduce CakePHP 3 features in one-off tutorials, we will showcase the power of the new framework to build working applications.&lt;/p&gt;

&lt;h2 id=&quot;why-3-tutorials&quot;&gt;Why 3 tutorials?&lt;/h2&gt;

&lt;p&gt;CakePHP 3 is coming out, so we should match it with the same number. It also helps that an Advent Calendar is 25 days, so we’ll have an interlude between each tutorial series.&lt;/p&gt;

&lt;h2 id=&quot;who-are-these-tutorials-aimed-at&quot;&gt;Who are these tutorials aimed at?&lt;/h2&gt;

&lt;p&gt;You should have some knowledge of the PHP language, and knowledge of any MVC framework will help. That said, new CakePHP developers will hopefully grow more comfortable as we progress with the tutorials.  We’ll be laying the foundation for effective application development - via working local development environments and production code deployment.&lt;/p&gt;

&lt;p&gt;For experienced CakePHP developers, these series of tutorials will be designed to point out changes from the 2.x series. Note that we’ll be a bit light on tests - this is a purposeful change to make following the tutorials a bit easier, but don’t be afraid to practice TDD.&lt;/p&gt;

&lt;p&gt;For CakePHP haters, these tutorials are meant to show development practices in another framework. We will be using community libraries where possible, and thus most of the applications we are building will be possible to build in other frameworks. As CakePHP 3 is quite modular, you are welcome to incorporate both developed application code as well as CakePHP 3 libraries in your non-CakePHP projects.&lt;/p&gt;

&lt;h2 id=&quot;what-do-i-need&quot;&gt;What do I need?&lt;/h2&gt;

&lt;p&gt;These tutorials are completely free, and there will be no cost for any of the tools we use (other than your computer!). You’ll want to setup the following before reading these tutorials:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;a href=&quot;https://github.com/&quot;&gt;Github account&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku account&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; if you are not on a Mac&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt; or &lt;a href=&quot;http://www.vmware.com/products/fusion&quot;&gt;Vmware Fusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please ensure you have all of the above setup, as otherwise certain portions of the tutorials will not make sense.&lt;/p&gt;

&lt;p&gt;Note that not every tutorial will use the above tools, and you are free to use alternatives if you so desire.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-get-started&quot;&gt;How do I get started?&lt;/h2&gt;

&lt;p&gt;I’ll be posting new posts in the series each day of the Advent Calendar, and tweeting about it as &lt;a href=&quot;https://twitter.com/savant&quot;&gt;@savant&lt;/a&gt;. If you’d like to subscribe to this blog, you may follow the &lt;a href=&quot;http://josediazgonzalez.com/atom.xml&quot;&gt;rss feed here&lt;/a&gt;. Also, all posts in the series will be conveniently linked on the sidebar of every post in the 2014 CakeAdvent Calendar. Come back tomorrow (if you’re reading this on the 1st of December!) for more delicious content.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Dec 2014 17:24:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/12/01/cakephp-advent-calendar-2014/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/12/01/cakephp-advent-calendar-2014/</guid>
        
        <category>CakeAdvent-2014</category>
        
        <category>cakephp</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Work Items</title>
        <description>&lt;p&gt;Areas of active interest over the next few months. This is a brain dump, and a much better way of tracking wtf I want to do than the current todo-list method I’ve been using. I doubt I’ll get half this crap done.&lt;/p&gt;

&lt;h2 id=&quot;software-as-a-service&quot;&gt;Software as a Service&lt;/h2&gt;

&lt;p&gt;Some day I would like to have tens of dollars come into my bank account every month. Here are two pieces of software I am writing in the hopes that people will want to pay me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Writing a SaaS Wiki platform.
    &lt;ul&gt;
      &lt;li&gt;Needs some sort of inline wiki editor. Haven’t looked too hard, and I figure I could write one if need be.&lt;/li&gt;
      &lt;li&gt;Need to extend the markdown parser (cebe/markdown) to support lots of extensions useful wiki extensions. Yes, it’s markdown based, and yes, I realize you can use a Github repo/wiki or something instead. Or an existing wiki solution.&lt;/li&gt;
      &lt;li&gt;Should probably hire people to audit cebe/markdown for security issues&lt;/li&gt;
      &lt;li&gt;I need a better styling than the bullshit I came up with when drunk. Not that it’s bad, but I was drunk.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Writing a SaaS Book Editing tool.
    &lt;ul&gt;
      &lt;li&gt;I originally wrote one to make it easy for me to allow people to edit my own book, and I figure it might be useful to other people.&lt;/li&gt;
      &lt;li&gt;Needs to support context for comments&lt;/li&gt;
      &lt;li&gt;Missing comment notifications&lt;/li&gt;
      &lt;li&gt;No way to currently mark a comment as “resolved”, which makes it a pita to have to review old comments.&lt;/li&gt;
      &lt;li&gt;Need to support giving users access to books as well as limiting them to certain chapters. Currently I need to insert a database record, and that won’t work in production.&lt;/li&gt;
      &lt;li&gt;Need to support multiple “owners” of a book. Maybe like book organizations or something. Might need to rework the permission system.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fun-side-projects&quot;&gt;Fun side projects&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A yes/no domain hosting platform. You point a domain at the yes/no generator, pay $10 a year, and get stats/an api to switch the yes/no to something else.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://humanslol.org/&quot;&gt;humanslol.org&lt;/a&gt; needs to be a thing.&lt;/li&gt;
  &lt;li&gt;Making &lt;a href=&quot;https://twitter.com/savant/status/520684357946994688&quot;&gt;more 8-bit paintings&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blogging&quot;&gt;Blogging&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CakeAdvent 2014 is going to be a thing - &lt;a href=&quot;/tags/CakeAdvent-2013/&quot;&gt;last year&lt;/a&gt; was tres excellent - and I’m currently gathering material&lt;/li&gt;
  &lt;li&gt;Bringing back my &lt;a href=&quot;/tags/daily-dev-log/&quot;&gt;daily dev log&lt;/a&gt; in some fashion. It helped me formulate my plans - most work ended up being spread out over a series of a few days.&lt;/li&gt;
  &lt;li&gt;A few tutorial posts I started but never completed, plus things people ask about in my issue tracker.&lt;/li&gt;
  &lt;li&gt;Writing more tutorials on operations-type things, which will give me an excuse to learn how to use said tools.&lt;/li&gt;
  &lt;li&gt;Updates to my blog to make discovering content a bit easier, as well as styling and blah blah fucking blah.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;books&quot;&gt;Books&lt;/h2&gt;

&lt;p&gt;I’m writing/rewriting a few books, mostly on CakePHP.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A book on using &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Python Fabric&lt;/a&gt; for various things.
    &lt;ul&gt;
      &lt;li&gt;Based on some of the things I’ve done at work/to support work.&lt;/li&gt;
      &lt;li&gt;Using it as an api, writing custom decorators, integrating with AWS, fixing logging, writing Web UIs, etc. Should be a small but fun one.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Updating my &lt;a href=&quot;/cakephp-book/&quot;&gt;current CakePHP book&lt;/a&gt; to 3.x.
    &lt;ul&gt;
      &lt;li&gt;I’m about half-way done, but need to redo certain chapters as the CakePHP apis change a bit in certain cases.&lt;/li&gt;
      &lt;li&gt;Want to also add two new chapters:
        &lt;ul&gt;
          &lt;li&gt;Versioning Pastes&lt;/li&gt;
          &lt;li&gt;Adding a simple api with oauth integration&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Converting a tutorial series to CakePHP 3.x.
    &lt;ul&gt;
      &lt;li&gt;The original writer has given me permission, just need to actually write the content.&lt;/li&gt;
      &lt;li&gt;Aimed towards intro CakePHP users, so different target from my first one.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;open-source&quot;&gt;Open Source&lt;/h2&gt;

&lt;p&gt;As always, I’m heavily involved in both my own and community projects. Poop.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://beaver.readthedocs.org/&quot;&gt;Beaver&lt;/a&gt; needs a whole lot of love :( . I wish I had time to work on it/improve it, as I learned a lot during the process and I know there are things I can improve.&lt;/li&gt;
  &lt;li&gt;I started helping maintain &lt;a href=&quot;https://github.com/progrium/dokku&quot;&gt;Dokku&lt;/a&gt; - a single-server heroku alternative.
    &lt;ul&gt;
      &lt;li&gt;The original maintainer was burned out I guess. NBD, shit happens. I think he’s starting to pickup some steam, so hopefully we can continue on with this.&lt;/li&gt;
      &lt;li&gt;Lots of pull requests and issues to triage. I closed ~60 issues and merged ~19 pull requests over the past week. My goal is zero bugs by the time we hit our 0.4.0 release, so stabilizing the external api is pretty important.&lt;/li&gt;
      &lt;li&gt;I personally made 22 commits over the past few days. It’s been a good way to exercise my bash-fu.&lt;/li&gt;
      &lt;li&gt;Tests still fail, and I don’t have access to the webserver that runs them or even the script that handles test-running :( . We’ll get that sorted out though, I’m sure.&lt;/li&gt;
      &lt;li&gt;I’d like to write a simple web ui for it and integrate it with AWS services - RDS, ElastiCache, backups - and potentially sell that web ui as a product. Not that anyone would/should buy it. I’ve always wanted to write web tools to automate servers…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lots of &lt;a href=&quot;/open-source/&quot;&gt;CakePHP open source&lt;/a&gt;…
    &lt;ul&gt;
      &lt;li&gt;Move &lt;a href=&quot;https://github.com/friendsofcake/vagrant-chef&quot;&gt;friendsofcake/vagrant-chef&lt;/a&gt; to support more of a heroku-style deploy for any PHP framework. Would be extremely nice if users of the project could just have their framework auto-detected and be able to work.&lt;/li&gt;
      &lt;li&gt;Work on &lt;a href=&quot;https://github.com/friendsofcake/crud-view&quot;&gt;friendsofcake/crud-view&lt;/a&gt;. I started a while back, but it needs a lot of love and a dedicated developer. It’s basically scaffolding on steroids.&lt;/li&gt;
      &lt;li&gt;Updating a bunch of plugins to CakePHP 3.x.&lt;/li&gt;
      &lt;li&gt;Marking a bunch of plugins as deprecated and pointing users to alternatives&lt;/li&gt;
      &lt;li&gt;Adding support to filter out 3.x from 2.x plugins on the CakePHP plugins site&lt;/li&gt;
      &lt;li&gt;Making a new version of the &lt;a href=&quot;https://github.com/friendsofcake/app-template/&quot;&gt;friendsofcake/app-template&lt;/a&gt; project for 3.x. Much simpler now that CakePHP 3 has built-in support for using DSNs for connection strings, but still has to be done at some point. Will be necessary for my book.&lt;/li&gt;
      &lt;li&gt;Contributing cli-based migration generation for &lt;a href=&quot;https://phinx.org/&quot;&gt;phinx&lt;/a&gt;. We have r&lt;a href=&quot;https://github.com/CakeDC/migrations/blob/master/Docs/Documentation/Generate-Migrations-Without-DB-Interaction.md&quot;&gt;ails-like migration generation&lt;/a&gt; in CakePHP 2.x, but now that we’re adopting a community library, we need to port that feature. Won’t be hard as the basic structure is already there.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Generic PHP queuing library.
    &lt;ul&gt;
      &lt;li&gt;I already have a version I stopped working on last year called &lt;a href=&quot;https://github.com/josegonzalez/php-queuesadilla&quot;&gt;php-queuesadilla&lt;/a&gt;, though it needs some love and care before it can be considered general use. It also needs to use proper queuing systems (rabbit and zero are missing).&lt;/li&gt;
      &lt;li&gt;All the existing ones suck or pull in quite a few requirements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;work-related-stuff&quot;&gt;Work-related stuff&lt;/h2&gt;

&lt;p&gt;There’s other, more important crap, but one does not simply post all the things. The stuff here will likely be open source if it already isn’t.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An integration between ruby’s ERB templates and consul. Should let me re-use chef templates rather than needing to maintain them in two places.&lt;/li&gt;
  &lt;li&gt;Make it easier to interact with &lt;a href=&quot;https://github.com/seatgeek/cronq&quot;&gt;cronq&lt;/a&gt;, a distributed cron-like system. Also have a few logging improvements to make, and the codebase isn’t the greatest thing…&lt;/li&gt;
  &lt;li&gt;Making &lt;a href=&quot;https://github.com/seatgeek/graphite-pager&quot;&gt;graphite-pager&lt;/a&gt; scale slightly better, perhaps by rewriting it to be a statsd clone so that it can introspect on data rather than retreiving it during a check.&lt;/li&gt;
  &lt;li&gt;Clean up a php-aqmp job system we have (unrelated to my own open source work). You know, to be good open-source citizens.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tldr-im-hella-busy&quot;&gt;tl;dr I’m hella busy&lt;/h4&gt;
</description>
        <pubDate>Sun, 16 Nov 2014 19:47:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/11/16/work-items/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/11/16/work-items/</guid>
        
        <category>development</category>
        
        
        <category>dev log</category>
        
      </item>
    
      <item>
        <title>CakePHP as a Microframework</title>
        <description>&lt;p&gt;One of the features that most frameworks toute is the ability to respond to a request from the route file immediately. For instance, here is how SlimPHP applications are structured (at least initially):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$app = new \Slim\Slim();
$app-&amp;gt;get('/hello/:name', function ($name) {
    echo &quot;Hello, $name&quot;;
});
$app-&amp;gt;run();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;People familiar with this type of application are likely familiar with the &lt;code&gt;Sinatra&lt;/code&gt; microframework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CakePHP has typically been in the opposite camp. Lots of classes to wire up to get a response on the page. Kind of lame, and then you &lt;em&gt;have&lt;/em&gt; to integrate with CakePHP’s conventions, which can be frustrating if you simply want to use the framework as a library. It’s quite straightforward to turn CakePHP into a microframework using dispatch filters.&lt;/p&gt;

&lt;p&gt;Lets define a simple api. We’ll want to be able to connect arbitrary routes to a &lt;code&gt;callable&lt;/code&gt; or a class that has a &lt;code&gt;respond&lt;/code&gt; method. This can look like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class ResponseInterface {
    public abstract function respond($request, $response);
}

class HelloWorld implements ResponseInterface {
    public function respond($request, $response) {
        $response-&amp;gt;body('Hello World');
    }
}

Router::connect('/hello/*', ['callable' =&amp;gt; function($request, $response) {
    $response-&amp;gt;body('Hello World');
}]);

Router::connect('/world/*', ['callable' =&amp;gt; 'HelloWorld']);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Controller classes have plumbing to auto-generate responses based on &lt;em&gt;just&lt;/em&gt; the &lt;code&gt;CakeRequest&lt;/code&gt; and &lt;code&gt;CakeResponse&lt;/code&gt; objects, hence why they are necessary. We also implement the &lt;code&gt;ResponseInterface&lt;/code&gt; class to make the PHPJava people happy :)&lt;/p&gt;

&lt;p&gt;To route these properly, we’ll hook into CakePHP’s dispatch cycle using a custom dispatch filter as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
App::uses('DispatcherFilter', 'Routing');
class CallableFilter extends DispatcherFilter {
    public function beforeDispatch(CakeEvent $event) {
        $callable = null;
        if (isset($event-&amp;gt;data['request']-&amp;gt;params['callable'])) {
            $callable = $event-&amp;gt;data['request']-&amp;gt;params['callable'];
        }

        if (is_string($callable) &amp;amp;&amp;amp; class_exists($callable)) {
            $callable = new $callable;
            $callable-&amp;gt;respond($event-&amp;gt;data['request'], $event-&amp;gt;data['response']);
        } elseif (is_callable($callable)) {
            $callable($event-&amp;gt;data['request'], $event-&amp;gt;data['response']);
        } else {
            return null;
        }

        $event-&amp;gt;stopPropagation();
        return $event-&amp;gt;data['response'];
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our CallableFilter, we check for the existence of a &lt;code&gt;callable&lt;/code&gt;. For practicality, we’re a bit flexible in this definition and also allow class names to be “callables”. All &lt;code&gt;callable&lt;/code&gt; executions are given &lt;code&gt;CakeRequest&lt;/code&gt; and a &lt;code&gt;CakeResponse&lt;/code&gt; objects, and we automatically call &lt;code&gt;$event-&amp;gt;stopPropagation()&lt;/code&gt; should the callable be invoked.&lt;/p&gt;

&lt;p&gt;To configure our filter, simply attach it to your DispatcherFilter configuration in &lt;code&gt;app/Config/bootstrap.php&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
Configure::write('Dispatcher.filters', [
    'AssetDispatcher',
    'CacheDispatcher',
    'CallableFilter'
]);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And voila! You have a CakePHP microframework.&lt;/p&gt;

&lt;p&gt;Some things you can now do with this setup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configure before and after request filters&lt;/li&gt;
  &lt;li&gt;Setup a templating system (with helper loading)&lt;/li&gt;
  &lt;li&gt;Automatically load model classes based on class name and configuration&lt;/li&gt;
  &lt;li&gt;Figure out how to do reverse routing&lt;/li&gt;
  &lt;li&gt;Reimplement all of the CakePHP dispatching because you refuse to use a full framework ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Microframeworks have their place, and while I don’t recommend you implement &lt;em&gt;all&lt;/em&gt; of your CakePHP applications using the above setup, it can be a powerful tool in your arsenal.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Mar 2014 20:37:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/03/23/cakephp-a-microframework/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/03/23/cakephp-a-microframework/</guid>
        
        <category>cakephp</category>
        
        <category>dispatcher</category>
        
        <category>microframeworks</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Shipping CakePHP App Logs to Logstash via Syslog</title>
        <description>&lt;p&gt;Writing a logger for CakePHP isn’t very difficult. The work lies in implementing the &lt;code&gt;CakeLogInterface&lt;/code&gt;, which requires that you implement a &lt;code&gt;write&lt;/code&gt; method as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
App::uses('BaseLog', 'Log/Engine');
class LogstashLog extends BaseLog
{
    public function write($type, $message)
    {
        // write to some output.
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above class can go into &lt;code&gt;app/Lib/Log/Engine/LogstashLog.php&lt;/code&gt;. Once you’ve implemented the interface - and I recommend you do so by extending BaseLog - you may want to actually write the logs to some location. In our case, we want to ship these logs to &lt;code&gt;Logstash&lt;/code&gt;, a log processing tool that can take logs and decompose them into useful information.&lt;/p&gt;

&lt;p&gt;At the very base, log messages should have some context about the logs - specifically a timestamp. Rather than invent our own format, we’ll use &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO-8601&lt;/a&gt;, which Logstash can handle natively. We can represent this using the following bit of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$format = 'Y-m-d\TH:i:s.uP';
echo date($format); // ISO-8601 compliant datetime
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Logstash also represents message as &lt;code&gt;json&lt;/code&gt; in a specific format. Pre-formatting our log messages would allow Logstash to skip any regular expression parsing of our log messages. The following is the current format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
    &quot;@timestamp&quot;: &quot;2012-12-18T01:01:46.092538Z&quot;,
    &quot;@version&quot;: 1,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All other fields are optional, and therefore our &lt;code&gt;LogstashLog&lt;/code&gt; would look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
App::uses('BaseLog', 'Log/Engine');
class LogstashLog extends BaseLog
{
    protected $format = 'Y-m-d\TH:i:s.uP';
    public function write($type, $message)
    {
        $data = [
            '@timestamp' =&amp;gt; date($this-&amp;gt;format),
            '@version' =&amp;gt; 1,
            'message' =&amp;gt; $message,
            'tags' =&amp;gt; [$type],
        ];
        // write to some output.
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use &lt;code&gt;syslog&lt;/code&gt; to ship our logs. PHP defines the following three methods to interface with &lt;code&gt;syslog&lt;/code&gt;, and I recommend reading up on them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;openlog&lt;/code&gt;: opens a connection to the system logger for a program&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;syslog&lt;/code&gt;: generates a log message that will be distributed by the system logger&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;closelog&lt;/code&gt;: closes the descriptor being used to write to the system logger&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adding in &lt;code&gt;syslog&lt;/code&gt; support will change our logger as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
App::uses('BaseLog', 'Log/Engine');
class LogstashLog extends BaseLog
{
    protected $format = 'Y-m-d\TH:i:s.uP';

    protected $logLevels = [
        'emergency' =&amp;gt; LOG_EMERG,
        'alert' =&amp;gt; LOG_ALERT,
        'critical' =&amp;gt; LOG_CRIT,
        'error' =&amp;gt; LOG_ERR,
        'warning' =&amp;gt; LOG_WARNING,
        'notice' =&amp;gt; LOG_NOTICE,
        'info' =&amp;gt; LOG_INFO,
        'debug' =&amp;gt; LOG_DEBUG,
    ];

    public function write($type, $message)
    {
        $data = [
            '@timestamp' =&amp;gt; date($this-&amp;gt;format),
            '@version' =&amp;gt; 1,
            'message' =&amp;gt; $message,
            'tags' =&amp;gt; [$type],
        ];

        if (!openlog('app', LOG_PID, LOG_USER)) {
            // Handle your logging error...
            return;
        }

        syslog($this-&amp;gt;logLevels[$type], json_encode($data));
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if we wanted to include extra metadata? Well, we can modify our &lt;code&gt;write&lt;/code&gt; method to allow &lt;code&gt;$message&lt;/code&gt; to be an array as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function write($type, $message)
{
    $message = is_array($message) ? $message : compact('message');
    $data = array_merge(array(
        '@timestamp' =&amp;gt; date($this-&amp;gt;format),
        '@version' =&amp;gt; 1,
    ), $message);

    if (isset($data['tags'])) {
        $data['tags'][] = $type;
    } else {
        $data['tags'] = [$type];
    }

    if (!openlog('app', LOG_PID, LOG_USER)) {
        // Handle your logging error...
        return;
    }

    syslog($this-&amp;gt;logLevels[$type], json_encode($data));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We never want to drop logs, so we’ll fallback to using &lt;code&gt;FileLog&lt;/code&gt; as our parent class. When &lt;code&gt;openlog&lt;/code&gt; returns false, we’ll simply call &lt;code&gt;return parent::write($type, json_ecode($message));&lt;/code&gt;. We can then later go back with a different log shipper and reprocess anything that couldn’t be shipped to Logstash.&lt;/p&gt;

&lt;p&gt;Here is what our log engine will look like at the end of the day:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
App::uses('FileLog', 'Log');
class LogstashLog extends FileLog
{
    protected $format = 'Y-m-d\TH:i:s.uP';

    protected $logLevels = [
        'emergency' =&amp;gt; LOG_EMERG,
        'alert' =&amp;gt; LOG_ALERT,
        'critical' =&amp;gt; LOG_CRIT,
        'error' =&amp;gt; LOG_ERR,
        'warning' =&amp;gt; LOG_WARNING,
        'notice' =&amp;gt; LOG_NOTICE,
        'info' =&amp;gt; LOG_INFO,
        'debug' =&amp;gt; LOG_DEBUG,
    ];

    public function write($type, $message)
    {
        $message = is_array($message) ? $message : compact('message');
        $data = array_merge(array(
            '@timestamp' =&amp;gt; date($this-&amp;gt;format),
            '@version' =&amp;gt; 1,
        ), $message);

        if (isset($data['tags'])) {
            $data['tags'][] = $type;
        } else {
            $data['tags'] = [$type];
        }

        if (!openlog('app', LOG_PID, LOG_USER)) {
            return parent::write($type, json_ecode($data));
        }

        return syslog($this-&amp;gt;logLevels[$type], json_encode($data));
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now configure our custom logging engine the same way we would any other logging engine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// in our app/Config/bootstrap.php
App::uses('CakeLog', 'Log');
CakeLog::config('debug', [
    'engine' =&amp;gt; 'Logstash',
    'types' =&amp;gt; ['notice', 'info', 'debug'],
    'file' =&amp;gt; 'debug',
]);
CakeLog::config('error', [
    'engine' =&amp;gt; 'Logstash',
    'types' =&amp;gt; ['warning', 'error', 'critical', 'alert', 'emergency'],
    'file' =&amp;gt; 'error',
]);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice that we included some extra configuration information. This is primarily used for routing messages - we could in theory create a &lt;code&gt;Null&lt;/code&gt; engine and use that for &lt;code&gt;debug&lt;/code&gt; messages - though we also specify a &lt;code&gt;file&lt;/code&gt; so that the parent &lt;code&gt;FileLog&lt;/code&gt; class is properly configured.&lt;/p&gt;

&lt;p&gt;Creating custom logging engines is quite simple with CakePHP, and it would be easy to extend this system to have log handlers and formatters.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Mar 2014 06:28:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/03/22/shipping-cakephp-application-logs-to-logstash/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/03/22/shipping-cakephp-application-logs-to-logstash/</guid>
        
        <category>cakephp</category>
        
        <category>logging</category>
        
        <category>logstash</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Using View Cells in your CakePHP applications</title>
        <description>&lt;p&gt;There is an &lt;a href=&quot;https://github.com/cakephp/cakephp/issues/3052&quot;&gt;interesting ticket&lt;/a&gt; in 3.x describing View Cells. Lets dive right in and figure out what they mean for CakePHP applications.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-view-cell&quot;&gt;What is a view cell?&lt;/h2&gt;

&lt;p&gt;View cells are like mini templates that are assigned to variables. A good use case for them would be to decorate entities of data. For example, consider the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class PostCell extends ViewCell {
    public $view = 'single_post';

    // I am renaming the method `render` to `run` for a specific reason...
    public function run(array $options = [])
    {
        $this-&amp;gt;loadModel('Posts');
        $post = $this-&amp;gt;Posts-&amp;gt;findById($options['id']
        $this-&amp;gt;set(compact('post'));
        return $this; // So I can chain the `run` method
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above class would retrieve the data necessary to render a &lt;code&gt;PostCell&lt;/code&gt; using the &lt;code&gt;single_post&lt;/code&gt; template file. Our template file could be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;?= $post-&amp;gt;get('title') ?&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;div class=&quot;post-content&quot;&amp;gt;
    &amp;lt;?= $post-&amp;gt;get('content') ?&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to use this view cell, we might do the following in our &lt;code&gt;view.ctp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= $this-&amp;gt;cell('PostCell', array('id' =&amp;gt; 10)) ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;reusing-cells-with-existing-data&quot;&gt;Reusing cells with existing data&lt;/h2&gt;

&lt;p&gt;What if we already have the data, and just want to re-use our cell? This is similar to using an element, though it would be possible with some hackery:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class PostCell extends ViewCell {
    public $view = 'single_post';

    public function run(array $options = [])
    {
        // Short-circuit the cell and return any passed data
        if (!empty($options['post'])) {
            $this-&amp;gt;set('post', $options['post']);
            return $this; // So I can chain the `run` method
        }

        $this-&amp;gt;loadModel('Posts');
        $post = $this-&amp;gt;Posts-&amp;gt;findById($options['id']
        $this-&amp;gt;set(compact('post'));
        return $this; // So I can chain the `run` method
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our use case would be to show this on an &lt;code&gt;index.ctp&lt;/code&gt; like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;? foreach ($posts as $post) : ?&amp;gt;
    &amp;lt;?= $this-&amp;gt;cell('PostCell', compact('post')) ?&amp;gt;
&amp;lt;? endforeach; ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;returning-cells-directly-from-the-controller&quot;&gt;Returning cells directly from the controller&lt;/h2&gt;

&lt;p&gt;We might also want to include the cell directly from the controller. We could do this by constructing the cell directly within the controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class PostsController extends Controller
{
    use CellTrait;

    public function view($id)
    {
        $post = $this-&amp;gt;Post-&amp;gt;findById($id);
        if (!$post) {
            throw new NotFoundException('Post not found');
        }

        $this-&amp;gt;set('post', $this-&amp;gt;decorate('PostCell', $post));
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And our &lt;code&gt;view.ctp&lt;/code&gt; would be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?= $post ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;retrieving-cell-data-from-a-controller&quot;&gt;Retrieving Cell data from a controller&lt;/h2&gt;

&lt;p&gt;You might want to reuse &lt;em&gt;just&lt;/em&gt; the cell data, and not the representation, within a controller. The following could be what the api for this looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class PostsController extends Controller
{
    use CellTrait;

    public function view($id)
    {
        $data = (new PostCell())-&amp;gt;run(compact('id'))-&amp;gt;data();
        if (empty($data['post'])) {
            throw new NotFoundException('Post not found');
        }

        // do things to $data['post']

        $this-&amp;gt;set('post', $this-&amp;gt;decorate('PostCell', $data['post']));
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the above looks familiar, it is because a PostCell can be pretty analagous to a service class, which I &lt;a href=&quot;/2013/12/06/building-service-classes/&quot;&gt;previously blogged about&lt;/a&gt; during CakeAdvent.&lt;/p&gt;

&lt;h3 id=&quot;containing-state-within-your-service-class&quot;&gt;Containing state within your service class&lt;/h3&gt;

&lt;p&gt;In the vein of reusing cells for service classes, what if we want to contain the success and failure state of the cell? We might extend our base &lt;code&gt;ViewCell&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class AppViewCell extends ViewCell
{
    public static function perform(array $options = [])
    {
        $klass = get_called_class();
        $cell = new $klass;
        $klass-&amp;gt;run($options);
        return $klass;
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you change the parent class of &lt;code&gt;PostCell&lt;/code&gt; to &lt;code&gt;AppViewCell&lt;/code&gt;, we can now do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$cell = PostCell::perform(array('id' =&amp;gt; 10));
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets make this a bit more interesting by adding &lt;code&gt;successful&lt;/code&gt; and &lt;code&gt;failed&lt;/code&gt; methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class AppViewCell extends ViewCell
{
    protected $success = null;

    public static function perform(array $options = [])
    {
        $klass = get_called_class();
        $cell = new $klass;
        $klass-&amp;gt;run($options);
        return $klass;
    }

    public function successful()
    {
        return $successful === true;
    }

    public function failed()
    {
        return $successful === false;
    }

    public function performed()
    {
        return $successful === null;
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now modify our &lt;code&gt;PostCell&lt;/code&gt; class to be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class PostCell extends ViewCell {
    public $view = 'single_post';

    public function run(array $options = [])
    {
        // Short-circuit the cell and return any passed data
        if (!empty($options['post'])) {
            $this-&amp;gt;set('post', $options['post']);
            return $this; // So I can chain the `run` method
        }

        $this-&amp;gt;loadModel('Posts');
        $post = $this-&amp;gt;Posts-&amp;gt;findById($options['id']
        $this-&amp;gt;success = !!$post;

        if ($this-&amp;gt;success) {
            $this-&amp;gt;set(compact('post'));
        }

        return $this; // So I can chain the `run` method
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now our controller action could become the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class PostsController extends Controller
{
    use CellTrait;

    public function view($id)
    {
        $cell = PostCell::perform(compact('id'));
        if ($cell-&amp;gt;successful()) {
            $this-&amp;gt;set('post', $this-&amp;gt;decorate('PostCell', $cell-&amp;gt;data()));
        }

        throw new NotFoundException('Post not found');
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;why-use-a-cell&quot;&gt;Why use a cell?&lt;/h2&gt;

&lt;p&gt;One of the most ill-used features of CakePHP is &lt;code&gt;View::requestAction()&lt;/code&gt;. Developers frequently use this all over their applications, causing convoluted cases where you need to figure out if you are within a web request or an internal action request, cluttering controllers. You also need to invoke a new CakePHP request, which can add some unneeded overhead.&lt;/p&gt;

&lt;p&gt;You could think of View cells as lightweight request containers. Rather than constructing a new request to get at some request data, you could simply reuse cells to get at useful data without having all of the overhead involved in invoking a controller. And as I showed above, they would make excellent containers for service classes.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Mar 2014 16:54:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2014/03/20/view-cells/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2014/03/20/view-cells/</guid>
        
        <category>cakephp</category>
        
        <category>views</category>
        
        <category>service</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Local Development Environment using Vagrant and Virtualbox</title>
        <description>&lt;p&gt;One thing developers have issues with is setting up their local development environment. You install a piece of software, it breaks something, and then rolling back is annoying. Or perhaps you have a new laptop, and now you need to reinstall the entire kitchen sink.&lt;/p&gt;

&lt;p&gt;I’ve been using &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; for the past few months to great success. Vagrant allows you to automate the creation and lifecycle of a virtual machine. You can &lt;em&gt;provision&lt;/em&gt; a new machine, automatically run code, and have a fully working environment in a few miinutes. The hard part is figuring out the exact steps needed to get your development environment up to speed.&lt;/p&gt;

&lt;p&gt;My Christmas gift to CakePHP developers is the &lt;em&gt;&lt;a href=&quot;https://github.com/FriendsOfCake/vagrant-chef&quot;&gt;FriendsOfCake/vagrant-chef&lt;/a&gt;&lt;/em&gt; repository, a vagrant installation custom-built for CakePHP applications. It will automatically setup the following within a virtual machine:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu 12.04 Precise Pangolin&lt;/li&gt;
  &lt;li&gt;Ningx 1.1&lt;/li&gt;
  &lt;li&gt;PHP 5.5&lt;/li&gt;
  &lt;li&gt;Percona MySQL 5.5&lt;/li&gt;
  &lt;li&gt;Redis 2.8&lt;/li&gt;
  &lt;li&gt;Memcached 1.4&lt;/li&gt;
  &lt;li&gt;Git 1.7&lt;/li&gt;
  &lt;li&gt;Composer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do we do it?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://www.vagrantup.com/downloads.html&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;Virtualbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;git clone https://github.com/FriendsOfCake/vagrant-chef.git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cd vagrant-chef&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;vagrant up&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once it’s up, you can simply replace your &lt;code&gt;app&lt;/code&gt; directory with your application and visit &lt;code&gt;192.168.13.37&lt;/code&gt;. Your application should be ready and raring to go!&lt;/p&gt;

&lt;p&gt;For more information, please visit the  &lt;em&gt;&lt;a href=&quot;https://github.com/FriendsOfCake/vagrant-chef&quot;&gt;FriendsOfCake/vagrant-chef&lt;/a&gt;&lt;/em&gt; repository! Happy Holidays!&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Dec 2013 16:29:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2013/12/25/local-development-environment-using-vagrant-and-virtualbox/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2013/12/25/local-development-environment-using-vagrant-and-virtualbox/</guid>
        
        <category>CakeAdvent-2013</category>
        
        <category>cakephp</category>
        
        <category>development</category>
        
        <category>vagrant</category>
        
        
        <category>cakephp</category>
        
      </item>
    
      <item>
        <title>Writing Slimmer Controllers</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Note: I am using the CakeEntity plugin &lt;a href=&quot;/2013/12/05/objectifying-cakephp-2-0-applications/&quot;&gt;from a previous post&lt;/a&gt; in this example. Feel free to ignore that code if it helps simplify what is going on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want to take a little time and go over ways in which we can slim down model code. Below is some early code from an application I developed - it handles lunch scheduling for small companies and teams.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
public function add($restaurant_id = null) {
  if (empty($restaurant_id)) {
    return $this-&amp;gt;redirect(array('action' =&amp;gt; 'index'));
  }

  $lunchDate = $this-&amp;gt;Lunch-&amp;gt;find('first', array(
    'entity' =&amp;gt; true,
    'conditions' =&amp;gt; array('Lunch.date' =&amp;gt; date('Y-m-d')),
    'contain' =&amp;gt; array('Restaurant'),
  ));

  if (!empty($lunchDate)) {
    return $this-&amp;gt;redirect(array('action' =&amp;gt; 'update', $restaurant_id));
  }

  $this-&amp;gt;_breadcrumbs[] = array(
    'name', =&amp;gt; 'Create Lunch Date',
    'url' =&amp;gt; array(),
  );

  $this-&amp;gt;set(compact('restaurant_id'));

  if (!empty($this-&amp;gt;request-&amp;gt;data['cancel'])) {
    $this-&amp;gt;Session-&amp;gt;info('Lunch canceled');
    return $this-&amp;gt;redirect(array('action' =&amp;gt; 'index'));
  }

  if (!$this-&amp;gt;request-&amp;gt;is('post')) {
    $data = $this-&amp;gt;Lunch-&amp;gt;getData('add');
    return $this-&amp;gt;set($data);
  }

  try {
    $entity = $this-&amp;gt;Lunch-&amp;gt;addEntity($this-&amp;gt;request-&amp;gt;data);
    $this-&amp;gt;Session-&amp;gt;success(__('The Lunch has been saved.'));
    return $this-&amp;gt;redirect($entity-&amp;gt;route());
  } catch (Exception $e) {
    $this-&amp;gt;Session-&amp;gt;danger($e-&amp;gt;getMessage());
    if ($entity) {
      $this-&amp;gt;request-&amp;gt;data = $entity-&amp;gt;toArray();
    }

    $data = $this-&amp;gt;Lunch-&amp;gt;getData('add');
    return $this-&amp;gt;set($data);
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is about 50 lines of code that essentially handles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finding an associated lunchdate&lt;/li&gt;
  &lt;li&gt;Form cancelation&lt;/li&gt;
  &lt;li&gt;Breadcrumbs for the view&lt;/li&gt;
  &lt;li&gt;Creating a lunchdate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This could and should be way smaller, and more reusable. Lets take a look at this in chunks.&lt;/p&gt;

&lt;h2 id=&quot;requiring-action-arguments&quot;&gt;Requiring action arguments&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
if (empty($restaurant_id)) {
  return $this-&amp;gt;redirect(array('action' =&amp;gt; 'index'));
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some people will have issues with how I do this, but because I use &lt;a href=&quot;/2013/12/12/abusing-exceptions-to-provide-model-layer-redirection/&quot;&gt;exceptions to handle redirection&lt;/a&gt;, this method works out well for me. I normally have a helper method in my AppController, &lt;code&gt;AppController::redirectUnless()&lt;/code&gt;, with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
public function redirectUnless($variable, $redirectTo = null) {
  if (!empty($variable)) {
    return;
  }

  if (empty($redirectTo)) {
    $redirectTo = array('action' =&amp;gt; 'index');
  }

  return $this-&amp;gt;redirect($redirectTo);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then my code sample becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$this-&amp;gt;redirectUnless($restaurant_id);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your tests excepted a return, this won’t work because PHP does not have conditional returns without guard statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;custom-finds&quot;&gt;Custom finds:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$lunchDate = $this-&amp;gt;Lunch-&amp;gt;find('first', array(
  'entity' =&amp;gt; true,
  'conditions' =&amp;gt; array('Lunch.date' =&amp;gt; date('Y-m-d')),
  'contain' =&amp;gt; array('Restaurant'),
));

if (!empty($lunchDate)) {
  return $this-&amp;gt;redirect(array('action' =&amp;gt; 'update', $restaurant_id));
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I absolutely hate writing finds in my view. Instead, I use custom finds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
App::uses('EntityModel', 'Entity.Model');
App::uses('LunchEntity', 'Model/Entity');
class Lunch extends EntityModel {
  public $findMethods = array(
    'lunchDate' =&amp;gt; true,
  );

  public function _findLunchDate($state, $query, $results = array()) {
    if ($state == 'before') {
      $query['entity'] = true;
      $query['conditions'] = array('Lunch.date' =&amp;gt; date('Y-m-d'));
      $query['contain'] = array('Restaurant');
      $query['limit'] = 1;
      return $query;
    }

    if (empty($results[0])) {
      return false;
    }

    return $results[0];
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s quite easy to setup a custom find - they have &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; states, and can have logic that applies to both. Please &lt;a href=&quot;http://book.cakephp.org/2.0/en/models/retrieving-your-data.html#creating-custom-find-types&quot;&gt;read the docs for more information&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our code sample would finally become:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$lunchDate = $this-&amp;gt;Lunch-&amp;gt;find('lunchDate');
$this-&amp;gt;redirectUnless($lunchDate, array('action' =&amp;gt; 'update', $restaurant_id));
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;handling-common-view-data&quot;&gt;Handling common view data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$this-&amp;gt;_breadcrumbs[] = array(
  'name', =&amp;gt; 'Create Lunch Date',
  'url' =&amp;gt; array(),
);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I usually have some common view data, such as meta tags, breadcrumbs, etc. that are set from each controller. Rather than have the underlying datastructure be exposed to each controller - the &lt;code&gt;_breadcrumbs&lt;/code&gt; array - I use a helper method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
protected function _addBreadcrumb($name, $url = array()) {
  $this-&amp;gt;_breadcrumbs[] = compact('name', 'url');
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then my controller code becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$this-&amp;gt;_addBreadcrumb('Create Lunch Date');
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;handling-form-cancellation&quot;&gt;Handling Form Cancellation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
if (!empty($this-&amp;gt;request-&amp;gt;data['cancel'])) {
  $this-&amp;gt;Session-&amp;gt;info(__('Lunch canceled'));
  return $this-&amp;gt;redirect(array('action' =&amp;gt; 'index'));
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My forms commonly have some sort of &lt;em&gt;cancel&lt;/em&gt; button on them. If pressed, the user will be brought back to the index action.&lt;/p&gt;

&lt;p&gt;Instead, I use some generic code in my &lt;code&gt;AppController::beforeFilter()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
public function beforeFilter() {
  if (!empty($this-&amp;gt;request-&amp;gt;data['cancel'])) {
    $this-&amp;gt;Session-&amp;gt;info(__('%s canceled', $this-&amp;gt;modelClass));
    return $this-&amp;gt;redirect(array('action' =&amp;gt; 'index'));
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I do not need to worry about having this logic in any of my actions.&lt;/p&gt;

&lt;h2 id=&quot;generic-form-handling&quot;&gt;Generic Form Handling&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
if (!$this-&amp;gt;request-&amp;gt;is('post')) {
  $data = $this-&amp;gt;Lunch-&amp;gt;getData('add');
  return $this-&amp;gt;set($data);
}

try {
  $entity = $this-&amp;gt;Lunch-&amp;gt;addEntity($this-&amp;gt;request-&amp;gt;data);
  $this-&amp;gt;Session-&amp;gt;success(__('The Lunch has been saved.'));
  return $this-&amp;gt;redirect($entity-&amp;gt;route());
} catch (Exception $e) {
  $this-&amp;gt;Session-&amp;gt;danger($e-&amp;gt;getMessage());
  if ($entity) {
    $this-&amp;gt;request-&amp;gt;data = $entity-&amp;gt;toArray();
  }

  $data = $this-&amp;gt;Lunch-&amp;gt;getData('add');
  return $this-&amp;gt;set($data);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trick to generic form handling is doing it in such a way to allow developers to override the functionality. Note that this means &lt;em&gt;all&lt;/em&gt; your forms &lt;em&gt;should&lt;/em&gt; be handled similarly. If not, there is no gain from creating a generic form handling method. The following is what I used in this application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
protected function _form($entity = null, $modelClass = null) {
  if (empty($modelClass)) {
    $modelClass = $this-&amp;gt;modelClass;
  }

  $_action = $this-&amp;gt;request-&amp;gt;params['action'];
  if ($entity &amp;amp;&amp;amp; empty($this-&amp;gt;request-&amp;gt;data)) {
    $this-&amp;gt;request-&amp;gt;data = $entity-&amp;gt;toArray($_action);
  }

  if (!$this-&amp;gt;request-&amp;gt;is($entity ? 'put' : 'post')) {
    $data = $this-&amp;gt;{$modelClass}-&amp;gt;getData($_action);
    return $this-&amp;gt;set($data);
  }

  try {
    $method = $entity ? 'updateEntity' : 'addEntity';
    $entity = $this-&amp;gt;{$modelClass}-&amp;gt;$method($this-&amp;gt;request-&amp;gt;data, $entity);
    $this-&amp;gt;Session-&amp;gt;success(__('The %s has been saved.', Inflector::humanize($modelClass)));
    return $this-&amp;gt;redirect($entity-&amp;gt;route());
  } catch (Exception $e) {
    $this-&amp;gt;Session-&amp;gt;danger($e-&amp;gt;getMessage());
    if ($entity) {
      $this-&amp;gt;request-&amp;gt;data = $entity-&amp;gt;toArray();
    }

    $data = $this-&amp;gt;{$modelClass}-&amp;gt;getData($_action);
    return $this-&amp;gt;set($data);
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above bit of code handles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Existing records being passed in&lt;/li&gt;
  &lt;li&gt;Models that are not the default model associated to the controller&lt;/li&gt;
  &lt;li&gt;Both creation and updating records&lt;/li&gt;
  &lt;li&gt;Session flash messages&lt;/li&gt;
  &lt;li&gt;Updating post data on failure&lt;/li&gt;
  &lt;li&gt;Retrieving data for the view&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the above helper method would simplify our action code to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
return $this-&amp;gt;_form();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;all-together&quot;&gt;All Together&lt;/h2&gt;

&lt;p&gt;Our previous codeblock of 49 lines is now the following, beautiful 10 line method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
public function add($restaurant_id = null) {
  $this-&amp;gt;redirectUnless($restaurant_id);

  $lunchDate = $this-&amp;gt;Lunch-&amp;gt;find('lunchDate');
  $this-&amp;gt;redirectUnless($lunchDate, array('action' =&amp;gt; 'update', $restaurant_id));

  $this-&amp;gt;_addBreadcrumb('Create Lunch Date');
  $this-&amp;gt;set(compact('restaurant_id'));
  return $this-&amp;gt;_form();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we gain from the new code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simpler design&lt;/li&gt;
  &lt;li&gt;Easier to understand for new developers&lt;/li&gt;
  &lt;li&gt;Unit tests for the parts can be created as opposed for the whole&lt;/li&gt;
  &lt;li&gt;Reusable methods have been created for other places across the codebase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Refactoring code is easy to get carried away with - as we did above - but also serves to freshen up a codebase and allow you to get more stuff done in less time.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Dec 2013 13:27:00 +0000</pubDate>
        <link>http://josediazgonzalez.com/2013/12/24/writing-slimmer-controllers/</link>
        <guid isPermaLink="true">http://josediazgonzalez.com/2013/12/24/writing-slimmer-controllers/</guid>
        
        <category>CakeAdvent-2013</category>
        
        <category>cakephp</category>
        
        <category>controllers</category>
        
        
        <category>cakephp</category>
        
      </item>
    
  </channel>
</rss>
